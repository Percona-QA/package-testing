# This task verifies that specified exporter has specified metric and it's value
#
# Task adjustments are handled by parent playbook vars:
#         var "port_flag"      :  to access agent with custom port
#                                 ex: port_flag: "--pmm-agent-listen-port={{ custom_port }}"
#         var "agent_password"  :  password for specified username to authenticate to exporter
#
#   must be called with "include_tasks" and "with_items:" or "loop:", ex:
#  - name: some name for the task
#    include_tasks: ../tasks/verify_pmm2_metric.yml
#    loop:
#      - { service_name: 'pgsql_socket_{{ instance_ip }}', metric_name: 'pg_up{collector=\"\exporter\"\}', metric_value: 1 }
#
- name: Set empty port_flag
  when: port_flag is not defined
  set_fact:
    port_flag: ""

- name: Set pmm-admin list output
  shell: "pmm-admin list {{ port_flag }}"
  register: list_output

- block:
    - name: "{{ item.service_name }}: grep Agent ID"
      when: item.service_name == 'node_exporter'
      shell: "echo '{{ list_output.stdout }}' | grep 'node_exporter' | awk -F' ' '{print $4}'"
      register: node_exporter_agent_id

    - name: "{{ item.service_name }}: grep Service ID"
      when: item.service_name != 'node_exporter'
      shell: "echo '{{ list_output.stdout }}' | grep {{ item.service_name }} | awk -F' ' '{print $4}'"
      register: service_id

    - name: "{{ item.service_name }}: grep Agent ID"
      when: item.service_name != 'node_exporter'
      shell: "echo '{{ list_output.stdout }}' | grep '{{ service_id.stdout }}' | awk '/_exporter/ {print $4}'"
      register: service_agent_id

    - set_fact:
        agent_id: "{{ (item.service_name == 'node_exporter') | ternary(node_exporter_agent_id, service_agent_id) }}"

    - set_fact:
        agent_password: "{{ agent_id.stdout }}"
      when: agent_password is not defined or '/agent_id/' in agent_password

    - name: "{{ item.service_name }}:: grep exporter port"
      shell: "echo '{{ list_output.stdout }}' | grep '{{ agent_id.stdout }}' | awk '/_exporter/ {print $NF}'"
      register: exporter_port

    - name: "{{ item.service_name }}: curl metric with no auth"
      shell: "curl -s 'http://127.0.0.1:{{ exporter_port.stdout }}/metrics' | grep -q '{{ item.metric }}'"
      register: metric_without_auth
      ignore_errors: yes

    - name: "{{ item.service_name }}: assert metrics cannot be accessed without authentication"
      assert:
        that:
          - metric_without_auth.stdout.find(item.metric) == -1
        fail_msg: "Authentication for exporter Broken, metrics fetched without basic auth!"
        success_msg: "{{ item.service_name }}: metrics are not accessible without auth"

    - block:
        - name: "{{ item.service_name }}: curl metric with auth token"
          shell: "curl -s -H 'Authorization: Basic {{ '%s:%s' | format('pmm', agent_password) | b64encode }}' 'http://127.0.0.1:{{ exporter_port.stdout }}/metrics' | grep '{{ item.metric }}'"
          register: metric_with_auth
          until: metric_with_auth.stdout == item.metric
          delay: "{{ delay | default(5, true) }}"
          retries: "{{ retries | default(3, true) }}"
        - name: "{{ item.service_name }}: assert metric is received"
          debug:
            msg: "{{ item.service_name }}: metric received!"
      rescue:
        - name: Waiting failed
          debug:
            msg: "'{{ item.metric }}' is not found!"
          failed_when: true
  rescue:
    - name: Print pmm-admin list output on fail
      debug:
        msg: "{{ list_output.stdout }}"
      failed_when: true
