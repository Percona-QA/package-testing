# This task installs and starts Percona Server 5.7 on CentOS and Debian/Ubuntu
#
# Task adjustments are handled by parent playbook vars:
#             var "port_flag"      :  to access agent with custom port
#                                     ex: port_flag: "--pmm-agent-listen-port={{ custom_port }}"
#             var "cmd_admin_list" :  to access agent with custom port
#                                     ex: cmd_admin_list: "pmm-admin list {{ port_flag }}"

- name: set empty port_flag
  set_fact:
    port_flag: ""
  when: port_flag is not defined

- name: set cmd_admin_list without flags
  set_fact:
    cmd_admin_list: "pmm-admin list"
  when: cmd_admin_list is not defined

- name: enable ps-57 release repo
  include_tasks: ./enable_repo.yml
  vars:
    only: yes
    package: "ps-57"
    repository: "release"

- name: install Percona Server 5.7 packages
  include_tasks: ./install_ps57.yml

- name: start mysql service
  service: name=mysql state=started

- name: start mysql service with service command
  command: service mysql start
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

- name: start mysql service with systemctl command
  command: systemctl start mysql
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

- name: set root password on centos
  shell: |
    init_pass=$(grep "temporary password" /var/log/mysqld.log | awk '{print $NF}' | tail -1)
    mysql --connect-expired-password -uroot --password="$init_pass" -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'U?fY)9s7|3gxUm';"
    cp ../templates/my_57.j2 /root/.my.cnf
  when: ansible_os_family == "RedHat"

- name: copy .my.cnf with credentials on centos
  template: src=../templates/my_57.j2
    dest=/root/.my.cnf
    mode=0640 owner=root group=root
  when: ansible_os_family == "RedHat"

- name: add mysql metrics and queries to monitoring
  command: ../scripts/pmm2_add_instance.sh mysql {{ port_flag }}
  when: ansible_os_family == "RedHat"

- name: add mysql instance for monitoring
  command: pmm-admin add mysql {{ port_flag }} --query-source=perfschema --socket=/var/run/mysqld/mysqld.sock --service-name=mysql_{{ instance_ip }}
  when: ansible_os_family != "RedHat"

- name: check if mysql monitoring running
  command: "{{ cmd_admin_list }}"
  register: list_output

- name: Assert if the pmm-admin list contains mysql
  assert:
    that:
      - "'MySQL' in list_output.stdout"

- name: Wait for mysqld_exporter to have Running Status.
  shell: "{{ cmd_admin_list }} | grep 'mysqld_exporter' | awk -F' ' '{print $2}'"
  register: mysqld_exporter_status
  until: mysqld_exporter_status.stdout.find('Running') != -1
  delay: 5
  retries: 5

- name: Assert if the pmm-admin list contains mysqld_exporter with Running state
  assert:
    that:
      - "'Running' in mysqld_exporter_status.stdout"

- name: Wait for mysql_perfschema_agent to have Running Status.
  shell: "{{ cmd_admin_list }} | grep 'mysql_perfschema_agent' | awk -F' ' '{print $2}'"
  register: mysql_perfschema_agent_status
  until: mysql_perfschema_agent_status.stdout.find('Running') != -1
  delay: 5
  retries: 5

- name: Assert if the pmm-admin list contains mysql_perfschema_agent with Running state
  assert:
    that:
      - "'Running' in mysql_perfschema_agent_status.stdout"
