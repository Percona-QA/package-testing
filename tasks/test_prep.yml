
  - name: setup epel 6 repo
    yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm state=present
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: setup epel 7 repo
    yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm state=present
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: setup epel 7 repo for Amazon Linux 2
    yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm state=present
    when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "2"

  - name: setup epel 8 repo
    yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm state=present
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: fix jessie repos
    template: src=../templates/jessie.repo
              dest=/etc/apt/sources.list
              mode=0640 owner=root group=root
    when: ansible_os_family == "Debian" and ansible_distribution_release == "jessie"

  - name: install needed packages for running tests with apt
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - unzip
      - wget
      - gnupg
    when: ansible_os_family == "Debian"

  - name: update systemd-sysv integration on debian/ubuntu
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - systemd-sysv
    when: ansible_os_family == "Debian" and ansible_distribution_release != "trusty"

  - name: install needed packages for running tests with yum
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - pv
      - libselinux-python
      - unzip
      - wget
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int <= 7

  - name: install needed packages for running tests with yum on RHEL8
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - unzip
      - wget
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int == 8

  - name: register SLES for updates with suse_register
    command: suse_register -a email="@@SLES_REG_EMAIL@@" -a regcode-sles=@@SLES_REG_CODE@@
    when: ansible_os_family == "Suse" and ansible_distribution_major_version == "11"

  - name: register SLES for updates with SUSEConnect
    command: SUSEConnect --email="@@SLES_REG_EMAIL@@" --regcode=@@SLES_REG_CODE@@
    when: ansible_os_family == "Suse" and ansible_distribution_major_version == "12"

  - name: import rpm gpg key on sles12
    command: rpmkeys --import https://www.percona.com/downloads/RPM-GPG-KEY-percona
    when: ansible_os_family == "Suse" and ansible_distribution_major_version == "12"

  # - name: setup SDK repo on SLES
  #   zypper: name="{{ item }}" state=present
  #   with_items:
  #   - /package-testing/sle-sdk-release-11.4-1.55.x86_64.rpm
  #   - /package-testing/sle-sdk-release-SDK-11.4-1.55.x86_64.rpm
  #   when: ansible_os_family == "Suse"

  - name: update image
    command: zypper -n update
    when: ansible_os_family == "Suse" and ansible_distribution_major_version == "12"

  - name: install needed packages for running tests with zypper
    zypper: 
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - wget
      - unzip
    when: ansible_os_family == "Suse"

  - name: download package-testing repo with wget
    command: "{{ item }}"
    with_items:
    - rm -rf /package-testing
    - rm -f master.zip
    - wget --no-check-certificate -O master.zip https://github.com/Percona-QA/package-testing/archive/master.zip
    - unzip master.zip
    - rm -f master.zip
    - mv package-testing-master /package-testing

  - name: install latest bats from github
    command: "{{ item }}"
    with_items:
    - rm -f master.zip
    - wget --no-check-certificate -O master.zip https://github.com/sstephenson/bats/archive/master.zip
    - unzip master.zip
    - rm -f master.zip
    - bats-master/install.sh /usr/local
    - rm -rf bats-master
