---
# tasks file for pdps
  - name: include playbook for removing Percona repo
    include_tasks: ../../../tasks/remove_percona_repository.yml

  - name: Install percona release
    include_tasks: ../../tasks/install_percona_release.yml

  - name: clean and update yum cache
    shell: |
      yum clean all
      yum makecache
    when: ansible_os_family == "RedHat"

  - name: disable the mariadb module on RHEL/CentOS 8
    command: yum module disable mariadb -y
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: Setup initial (old) repository pdps-{{ pdmysql_version }} {{ repo }}
    command: percona-release enable-only pdps-{{ pdmysql_version }} {{ repo }}
    vars:
      repo: "{{ lookup('env', 'FROM_REPO') }}"
      pdmysql_version: "{{ lookup('env', 'FROM_VERSION').split('-')[0] }}"

  - name: install Percona Toolkit new deb packages
    include_tasks: ../../../tasks/install_pt.yml
    
    # revert order once pt issue(DISTMYSQL-400) is resolved for OL8   
  - name: disable the mysql module on RHEL/CentOS 8
    command: yum module disable mysql -y
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"  

  - name: install Percona Server deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-dbg
      - percona-server-source
      - percona-server-client
      - percona-server-rocksdb
    when: ansible_os_family == "Debian"
    environment:
      PERCONA_TELEMETRY_DISABLE: "1"

  - name: install Percona Server rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
#      disablerepo: "epel"
      update_cache: yes
    vars:
      packages:
      - percona-server-server
      - percona-server-client
      - percona-server-test
      - percona-server-debuginfo
      - percona-server-devel
      - percona-server-rocksdb
    when: ansible_os_family == "RedHat"
    environment:
      PERCONA_TELEMETRY_DISABLE: "1"

# At this moment RHEL PXB packages do not support packages upgrade so we do not install them for major update on rhel. Re-check https://perconacorp.slack.com/archives/C047F39JKEW/p1700822258537029
  - name: install Percona XtraBackup {{ major_release_version }} packages
    include_tasks: ../../../tasks/install_pxb_innovation_lts.yml
    vars:
      major_release_version: "{{ lookup('env', 'FROM_VERSION').split('.')[:2]|join('') }}"
    when: ansible_os_family == "Debian" or (lookup('env', 'FROM_VERSION').split('.')[:2]|join('') == lookup('env', 'VERSION').split('.')[:2]|join('') and ansible_os_family == "RedHat")


  - name: install proxysql new deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - proxysql2
    when: ansible_os_family == "Debian"

  - name: install proxysql new rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
        - proxysql2
    when: ansible_os_family == "RedHat"

#install initscripts-service manually on OL9 till DISTMYSQL-300 is fixed
  - name: install init scripts for OL9
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - initscripts-service
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "9"

  - name: start proxysql service
    command: service proxysql start

  - name: stop proxysql service
    command: service proxysql stop

  - name: start proxysql service
    command: service proxysql start

  - name: install orchestrator new deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - percona-orchestrator-cli
        - percona-orchestrator-client
        - percona-orchestrator
    when: ansible_os_family == "Debian"

  - name: install orchestrator rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
        - percona-orchestrator
    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service: name=mysql state=started

  - name: download package-testing repo with wget
    command: "{{ item }}"
    with_items:
    - rm -rf /package-testing
    - rm -f master.zip
    - wget --no-check-certificate -O master.zip "https://github.com/{{ git_account }}/package-testing/archive/{{ branch }}.zip"
    - unzip master.zip
    - rm -f master.zip
    - mv "package-testing-{{ branch }}" /package-testing
    vars:
      branch: "{{ lookup('env', 'TESTING_BRANCH') }}"
      git_account: "{{ lookup('env', 'TESTING_GIT_ACCOUNT') | default('Percona-QA', true) }}"

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service: name=mysql state=restarted

  - name: install percona-mysql-shell package for CentOS
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - percona-mysql-shell
    when: ansible_os_family == "RedHat"

  - name: install percona-mysql-shell package for Debian/Ubuntu
    apt:
      update_cache: yes
      state: present
      name: "{{ packages }}"
    vars:
      packages:
      - percona-mysql-shell
    when: ansible_os_family == "Debian"

  - name: install percona-mysql-router package for CentOS
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - percona-mysql-router
    when: ansible_os_family == "RedHat"

  - name: install percona-mysql-router package for Debian/Ubuntu
    apt:
      update_cache: yes
      state: present
      name: "{{ packages }}"
    vars:
      packages:
      - percona-mysql-router
    when: ansible_os_family == "Debian"

  - name: start mysql service
    service: name=mysql state=started enabled=yes

  - name: Disable old repository pdps-{{ pdmysql_version }} {{ repo }}
    command: percona-release disable pdps-{{ pdmysql_version }} {{ repo }}
    vars:
      repo: "{{ lookup('env', 'FROM_REPO') }}"
      pdmysql_version: "{{ lookup('env', 'FROM_VERSION').split('-')[0] }}"

  - name: Setup new repository pdps-{{ pdmysql_version }} {{ repo }}
    command: percona-release enable pdps-{{ pdmysql_version }} {{ repo }}
    vars:
      repo: "{{ lookup('env', 'TO_REPO') }}"
      pdmysql_version: "{{ lookup('env', 'VERSION').split('-')[0] }}"

  - name: install Percona Toolkit new deb packages
    include_tasks: ../../../tasks/install_pt.yml

  - name: install Percona Server deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-dbg
      - percona-server-source
      - percona-server-client
      - percona-server-rocksdb
    when: ansible_os_family == "Debian"
    environment:
      PERCONA_TELEMETRY_DISABLE: "1"

  - name: install Percona Server rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-server-server
      - percona-server-client
      - percona-server-test
      - percona-server-debuginfo
      - percona-server-devel
      - percona-server-rocksdb
    when: ansible_os_family == "RedHat"
    environment:
      PERCONA_TELEMETRY_DISABLE: "1"

  - name: install Percona XtraBackup {{ major_release_version }} packages
    include_tasks: ../../../tasks/install_pxb_innovation_lts.yml
    vars:
      major_release_version: "{{ lookup('env', 'VERSION').split('.')[:2]|join('') }}"

  - name: install proxysql new deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - proxysql2
    when: ansible_os_family == "Debian"

  - name: install proxysql new rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
        - proxysql2
    when: ansible_os_family == "RedHat"

  - name: start proxysql service
    service: name=proxysql state=started

  - name: stop proxysql service
    service: name=proxysql state=stopped

  - name: start proxysql service
    service: name=proxysql state=started

  - name: install orchestrator new deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - percona-orchestrator-cli
        - percona-orchestrator-client
        - percona-orchestrator
    when: ansible_os_family == "Debian"

  - name: install orchestrator rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
        - percona-orchestrator-cli
        - percona-orchestrator-client
        - percona-orchestrator
    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service: name=mysql state=started

  - name: restart mysql service
    service: name=mysql state=restarted

  - name: install percona-mysql-shell package for CentOS
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-mysql-shell
    when: ansible_os_family == "RedHat"

  - name: install percona-mysql-shell package for Debian/Ubuntu
    apt:
      update_cache: yes
      state: latest
      name: "{{ packages }}"
    vars:
      packages:
      - percona-mysql-shell
    when: ansible_os_family == "Debian"

  - name: install percona-mysql-router package for CentOS
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-mysql-router
    when: ansible_os_family == "RedHat"

  - name: install percona-mysql-router package for Debian/Ubuntu
    apt:
      update_cache: yes
      state: latest
      name: "{{ packages }}"
    vars:
      packages:
      - percona-mysql-router
    when: ansible_os_family == "Debian"
