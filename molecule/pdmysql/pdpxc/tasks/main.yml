---
# tasks file for pdpxc

- name: include playbook for removing Percona repo
  include: ../../../tasks/remove_percona_repository.yml

- name: Install percona release
  include: ../../tasks/install_percona_release.yml

- set_fact:
    major_repo: "{{ lookup('env', 'MAJOR_REPO') }}"

- name: enable the PDMYSQL-80 repo pdpxc-{{ version }}
  command: percona-release enable-only pdpxc-{{ version }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"
    version: "{{ lookup('env', 'VERSION') }}"
  when: not major_repo

- name: enable the PDMYSQL-80 repo pdpxc-{{ version }}
  command: percona-release enable-only pdpxc-{{ version }} {{ repo }}
  vars:
    repo: "{{ lookup('env', 'REPO') }}"
    version: "{{ lookup('env', 'VERSION').split('.')[0] + '.' + lookup('env', 'VERSION').split('.')[1] }}"
  when: major_repo

- name: clean and update yum cache
  shell: |
    yum clean all
    yum makecache
  when: ansible_os_family == "RedHat"

- name: disable the mysql module on RHEL/CentOS 8
  command: yum module disable mysql -y
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "8"

- name: disable the mariadb module on RHEL/CentOS 8
  command: yum module disable mariadb -y
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "8"

- name: install PXC 8 deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - percona-xtradb-cluster-full
    - percona-xtradb-cluster-client
    - percona-xtradb-cluster-common
    - percona-xtradb-cluster-dbg
    - percona-xtradb-cluster-garbd-debug
    - percona-xtradb-cluster-garbd
    - percona-xtradb-cluster-server
    - percona-xtradb-cluster-server-debug
    - percona-xtradb-cluster-test
    - percona-xtradb-cluster
  when: ansible_os_family == "Debian"

- name: install PXC 8 rpm packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - percona-xtradb-cluster-full
    - percona-xtradb-cluster
    - percona-xtradb-cluster-client
    - percona-xtradb-cluster-debuginfo
    - percona-xtradb-cluster-devel
    - percona-xtradb-cluster-garbd
    - percona-xtradb-cluster-server
    - percona-xtradb-cluster-shared
    - percona-xtradb-cluster-shared-compat
    - percona-xtradb-cluster-test
  when: ansible_os_family == "RedHat"

- name: install HA Proxy RHEL Packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
    - percona-haproxy
    - percona-haproxy-debuginfo
  when: ansible_os_family == "RedHat"

- name: install HA Proxy 8 deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
  vars:
    packages:
    - percona-haproxy
    - percona-haproxy-doc
    - percona-vim-haproxy
  when: ansible_os_family == "Debian"

- name: clean dnf cache
  shell: |
    dnf clean all
  when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "8"

- name: install Percona XtraBackup 8.0 packages
  include_tasks: ../../../tasks/install_pxb80.yml

- name: install Percona Toolkit new deb packages
  include_tasks: ../../../tasks/install_pt.yml

- name: install proxysql new deb packages
  apt:
    name: "{{ packages }}"
    update_cache: yes
    state: latest
  vars:
    packages:
      - proxysql2
  when: ansible_os_family == "Debian"

- name: install proxysql new rpm packages
  yum:
    name: "{{ packages }}"
    state: latest
  vars:
    packages:
      - proxysql2
  when: ansible_os_family == "RedHat"

- name: start proxysql service
  service: name=proxysql state=started

- name: stop proxysql service
  service: name=proxysql state=stopped

- name: start proxysql service
  service: name=proxysql state=started
# set root password on centos
- name: start mysql service
  service: name=mysql state=started

- name: download package-testing repo with wget
  command: "{{ item }}"
  with_items:
  - rm -rf /package-testing
  - rm -f master.zip
  - wget --no-check-certificate -O master.zip "https://github.com/eleo007/package-testing/archive/{{ branch }}.zip"
  - unzip master.zip
  - rm -f master.zip
  - mv "package-testing-{{ branch }}" /package-testing
  vars:
    branch: "{{ lookup('env', 'TESTING_BRANCH') }}"

- name: install latest bats from github
  command: "{{ item }}"
  with_items:
  - rm -f master.zip
  - wget --no-check-certificate -O master.zip https://github.com/sstephenson/bats/archive/master.zip
  - unzip master.zip
  - rm -f master.zip
  - bats-master/install.sh /usr/local
  - rm -rf bats-master

- name: set root password on centos
  command: /package-testing/setpass_57.sh
  when: ansible_os_family == "RedHat"

- name: copy .my.cnf with credentials on centos
  template: src=../../../../templates/my_57.j2
            dest=/root/.my.cnf
            mode=0640 owner=root group=root
  when: ansible_os_family == "RedHat"

- name: run bats tests for mysql init scripts
  command: /usr/local/bin/bats /package-testing/bats/pxc-init-scripts.bats

- name: start mysql service
  service: name=mysql state=started
  when: ansible_os_family == "Debian"
