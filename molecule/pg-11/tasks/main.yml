---
# This playbook does following:
#   enables Percona repository
#   installs Percona Platform for PostgreSQL packages
#   does some tests
- name: include tasks for test env setup
  include_tasks: ../../../tasks/test_prep.yml

    #  - name: include tasks for enabling main repo
    #include: ../tasks/enable_main_repo.yml
    #when: lookup('env', 'install_repo') == "main"

  ### temp part until percona-release is updated for PPG project
- name: include tasks for enabling main repo (do this just for GPG key)
  include: ../../../tasks/enable_main_repo.yml

- name: download newer percona-release script
  get_url:
    url: https://raw.githubusercontent.com/percona/percona-repositories/master/scripts/percona-release.sh
    dest: /usr/bin/percona-release
    mode: '755'
    force: true

- name: setup temporary experimental repo until percona-release is updated
  command: percona-release enable ppg-11 experimental

- name: install Percona Platform for PostgreSQL 11 packages
  include_tasks: ../../../tasks/install_ppg11.yml

- name: Initialize Postgres RHEL
  command: /usr/pgsql-11/bin/postgresql-11-setup initdb
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "RedHat"

- name: Start Postgres RHEL
  service:
    name: postgresql-11
    state: started
    enabled: yes
  when: ansible_os_family == "RedHat"

- name: Install pgaudit Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-postgresql-11-pgaudit
      - percona-postgresql-11-pgaudit-dbgsym
  when: ansible_os_family == "Debian"

- name: Install pgaudit RHEL
  yum:
    name: percona-pgaudit
  when: ansible_os_family == "RedHat"

- name: Enable pgaudit for Debian
  lineinfile:
    path: /etc/postgresql/11/main/postgresql.conf
    line: shared_preload_libraries = 'pgaudit'
  when: ansible_os_family == "Debian"

- name: Enable pgaudit for RHEL
  lineinfile:
    path: /var/lib/pgsql/11/data/postgresql.conf
    line: shared_preload_libraries = 'pgaudit'
  when: ansible_os_family == "RedHat"

- name: Restart Postgres RHEL
  service:
    name: postgresql-11
    state: restarted
  when: ansible_os_family == "RedHat"

- name: Retart Postgres Debian
  command: sudo systemctl restart postgresql
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "Debian"

- name: Install pgbackrest Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-pgbackrest
      - percona-pgbackrest-doc
      - percona-pgbackrest-dbgsym
  when: ansible_os_family == "Debian"

- name: Install pgbackrest RHEL
  yum:
    name: percona-pgbackrest
  when: ansible_os_family == "RedHat"

- name: Create pgbackrest directory
  file:
    path: /etc/pgbackrest/
    state: directory


- name: Create pgbackrest configuration Debian
  blockinfile:
    path: /etc/pgbackrest/pgbackrest.conf
    create: yes
    block: |
      [global]
      repo1-path=/var/lib/pgbackrest

      [testing]
      pg1-path=/var/lib/postgresql/11/main
      pg1-port=5432
  when: ansible_os_family == "Debian"

- name: Create pgbackrest configuration RHEL
  blockinfile:
    path: /etc/pgbackrest/pgbackrest.conf
    create: yes
    block: |
      [global]
      repo1-path=/var/lib/pgbackrest

      [testing]
      pg1-path=/var/lib/pgsql/11/data
      pg1-port=5432
  when: ansible_os_family == "RedHat"


- name: Configure backup config for Debian
  blockinfile:
    path: /etc/postgresql/11/main/postgresql.conf
    block: |
      archive_mode = on
      archive_command = 'pgbackrest --stanza=testing archive-push %p'
      max_wal_senders = 3
      wal_level = replica
  when: ansible_os_family == "Debian"

- name: Configure backup config for RHEL
  blockinfile:
    path: /var/lib/pgsql/11/data/postgresql.conf
    block: |
      archive_mode = on
      archive_command = 'pgbackrest --stanza=testing archive-push %p'
      max_wal_senders = 3
      wal_level = replica
  when: ansible_os_family == "RedHat"

- name: Restart Postgres RHEL
  service:
    name: postgresql-11
    state: restarted
  when: ansible_os_family == "RedHat"

- name: Retart Postgres Debian
  command: sudo systemctl restart postgresql
  environment:
    PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
  when: ansible_os_family == "Debian"

- name: Install pgrepack Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-postgresql-11-repack
      - percona-postgresql-11-repack-dbgsym
  when: ansible_os_family == "Debian"

- name: Install pgrepack RHEL
  yum:
    name: percona-pg_repack11
  when: ansible_os_family == "RedHat"

- name: Install patroni Debian
  apt:
    name: "{{ packages }}"
  vars:
    packages:
      - percona-patroni
      - percona-patroni-dbgsym
  when: ansible_distribution == "Debian"

- name: Install patroni Ubuntu
  apt:
    name: percona-patroni
  when: ansible_distribution == "Ubuntu"

- name: Install patroni RHEL
  yum:
    name: percona-patroni
  when: ansible_os_family == "RedHat"