---
# This playbook enables AppArmour/SElinux, installs Telemetry Agent (TA) and PS pillar packages on arm/x86_64 architectures, installs PS plugins and components,
# sets up Group Replication, installs additional packages (list depends on architectire) like orchestrator, percona-xtrabackup, percona-toolkit, percona-orchestrator, percona-haproxy, 
# proxysql2, percona-mysql-shell, percona-mysql-router, pmm2-client.
# In more detail: 
#   - enables telemetry testing/experimental repos (main telemetry repository is enabled by default by percona-release tool)
#   - enables ps-80 testing/experimental/main repos and installs PS from there
#   - enables pt, pdps, pdpxc, pmm2-client repos and installs additional packages

  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: disable the mysql module on RHEL/CentOS 8
    command: /usr/bin/dnf module disable mysql -y
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: enforce SELinux on CentOS
    selinux:
      policy: targeted
      state: enforcing
    when: ansible_os_family == "RedHat"

  - name: Reboot machine for selinux
    reboot:
    when: ansible_distribution == "Amazon"

  - name: get selinux status
    command: sestatus
    register: selinux_status
    when: ansible_os_family == "RedHat"

  - name: list selinux status
    debug:
      var: selinux_status
    when: ansible_os_family == "RedHat"

  - name: install policycoreutils-python
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - policycoreutils-python
    when: (ansible_distribution == "Amazon")

  - name: Allow mysql to listen on tcp port 33061
    community.general.seport:
      ports: 33061
      proto: tcp
      setype: mysqld_port_t
      state: present
    when: ansible_os_family == "RedHat"
# semanage port -a -t mysqld_port_t -p tcp 33061

  - name: Install percona release
    include_tasks: ../../../../tasks/install_percona-release.yml


# ## PS UPGRADE START

#   - name: enable the ps-80
#     command: percona-release enable-only ps-80

#   - name: install Percona Server
#     apt:
#       name: "{{ packages }}"
#       update_cache: yes
#       state: latest
#     vars:
#       packages:
#       - percona-server-server
#       - percona-server-test
#       - percona-server-source
#       - percona-server-client
#       - percona-server-rocksdb
#       - percona-mysql-router
# #      - percona-mysql-shell
#     when: ansible_os_family == "Debian"

#   - name: install Percona Server
#     yum:
#       name: "{{ packages }}"
#       state: latest
#       update_cache: yes
#     vars:
#       packages:
#       - percona-server-server
#       - percona-server-test
#       - percona-server-client
#       - percona-server-rocksdb
#       - percona-mysql-router
# #      - percona-mysql-shell
#     when: ansible_os_family == "RedHat"

#   - name: start mysql service
#     service: name=mysql state=started

#   - name: set root password on centos
#     command: /package-testing/setpass_57.sh
#     when: ansible_os_family == "RedHat"

#   - name: restart mysql service
#     service: name=mysql state=restarted

#   - name: install AppArmor utils for deb
#     apt:
#       name: "{{ packages }}"
#       update_cache: yes
#       state: latest
#     vars:
#       packages:
#         - apparmor-utils
#     when: ansible_os_family == "Debian"

#   - name: enforce Apprmor  on DEB
#     command: aa-enforce /usr/sbin/mysqld
#     when: ansible_os_family == "Debian"

#   - name: append include for Debian
#     lineinfile:
#         path: /etc/apparmor.d/usr.sbin.mysqld
#         insertafter: '^# Allow access to openssl config'
#         line: '#somecustomtext'
#     when: ansible_os_family == "Debian"

# ##  PS UPGRADE END


# enable testing/experimental TA  repo for packages test
  - name: enable the telemetry {{ repo }}
    command: percona-release enable-only telemetry {{ repo }}
    vars:
      repo: "{{ lookup('env', 'TA_INSTALL_REPO') }}"
    when: lookup('env', 'TA_INSTALL_REPO') != "main" and lookup('env', 'TA_UPDATE') != "yes"

# # For experimental repo till packages are removed from pillar repos. Revert! Package should be installed together with the pillar!
#   - name: install TA packages debian
#     apt:
#       name: "{{ packages }}"
#       update_cache: yes
#       state: latest
#     vars:
#       packages:
#       - percona-telemetry-agent
#     when: ansible_os_family == "Debian" and lookup('env', 'TA_INSTALL_REPO') == "experimental" and lookup('env', 'TA_UPDATE') != "yes"

# # For experimental repo till packages are removed from pillar repos. Revert! Package should be installed together with the pillar!
#   - name: install TA packages rhel
#     yum:
#       name: "{{ packages }}"
#       state: latest
#       update_cache: yes
#     vars:
#       packages:
#       - percona-telemetry-agent
#     when: ansible_os_family == "RedHat" and lookup('env', 'TA_INSTALL_REPO') == "experimental" and lookup('env', 'TA_UPDATE') != "yes"

  - name: enable the ps-84-lts {{ repo }} 
    command: percona-release enable ps-84-lts {{ repo }} 
    vars:
      repo: "{{ lookup('env', 'PS_INSTALL_REPO') }}"

  # - name: enable prel experimental
  #   command: percona-release enable prel experimental

  - name: install Percona Server and backup deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-source
      - percona-server-client
      - percona-server-rocksdb
      - percona-mysql-router
    when: ansible_os_family == "Debian"
#    environment:
#      PERCONA_TELEMETRY_DISABLE: "1"

  - name: install Percona Server and backup rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-client
      - percona-server-rocksdb
      - percona-mysql-router
    when: ansible_os_family == "RedHat"
#    environment:
#      PERCONA_TELEMETRY_DISABLE: "1"

#   - name: enable percona-release original
#     command: percona-release enable original

  - name: Check TA version preupdate deb
    shell: apt list --installed percona-telemetry-agent*
    register: ta_package_describe
    when: ansible_os_family == "Debian" and lookup('env', 'TA_UPDATE') == "yes"

  - name: check ta_package_describe deb
    debug:
      var: ta_package_describe
    when: ansible_os_family == "Debian" and lookup('env', 'TA_UPDATE') == "yes"
  
  - name: Check TA version preupdate rpm
    shell: yum list installed percona-telemetry-agent*
    register: ta_package_describe
    when: ansible_os_family == "RedHat" and lookup('env', 'TA_UPDATE') == "yes"

  - name: check ta_package_describe rpm
    debug:
      var: ta_package_describe
    when: ansible_os_family == "RedHat" and lookup('env', 'TA_UPDATE') == "yes"

# enable testing/experimental TA  repo for packages test
  - name: enable the telemetry {{ repo }} for update
    command: percona-release enable telemetry {{ repo }}
    vars:
      repo: "{{ lookup('env', 'TA_INSTALL_REPO') }}"
    when: lookup('env', 'TA_INSTALL_REPO') != "main" and lookup('env', 'TA_UPDATE') == "yes"

## TA UPGRADE START
# install telemetry-agent package from main (telemetry repo is enabled by default with percona-release)

  - name: update TA packages on deb
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-telemetry-agent
    when: ansible_os_family == "Debian" and lookup('env', 'TA_UPDATE') == "yes"

  - name: update TA packages on rhel
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-telemetry-agent
    when: ansible_os_family == "RedHat" and lookup('env', 'TA_UPDATE') == "yes"
## TA UPGRADE END

# We do not have arm percona-mysql-shell & percona-toolkit so installing them separately

  - name: enable the pt repo
    command: percona-release enable pt
    when: ansible_architecture == "x86_64"

  - name: enable the pxb repo
    command: percona-release enable pxb-84-lts
    when: ansible_architecture == "x86_64"

  - name: install PT and mysql shell for x86_64
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-toolkit
      - percona-mysql-shell
    when: ansible_os_family == "Debian" and ansible_architecture == "x86_64"

  - name: install PT and mysql shell for x86_64
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-toolkit
      - percona-mysql-shell
    when: ansible_os_family == "RedHat" and ansible_architecture == "x86_64"

  - name: start mysql service
    service: name=mysql state=started

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service: name=mysql state=restarted

# We install AppArmor after PS packages installation because enforce is possible only when the package is in place
  - name: install AppArmor utils for deb
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
        - apparmor-utils
    when: ansible_os_family == "Debian"

  - name: enforce Apparmor  on DEB
    command: aa-enforce /usr/sbin/mysqld
    when: ansible_os_family == "Debian"

  - name: Add log-error-verbosity option and keyring file
    blockinfile:
      path: /etc/my.cnf
      insertafter: EOF
      block: |
        early_plugin_load=keyring_file.so
        log-error-verbosity=3
    when: 
        - ansible_os_family == "RedHat"

  - name: Add log-error-verbosity option and keyring file
    blockinfile:
      path: /etc/mysql/mysql.conf.d/mysqld.cnf
      insertafter: EOF
      block: |
        early_plugin_load=keyring_file.so
        log-error-verbosity=3
    when: 
        - ansible_os_family == "Debian"

  - name: copy the GR config file on Debian/Ubuntu
    template: src=../../../../templates/group_replication.j2 dest=/etc/mysql/conf.d/gr.cnf
    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

  - name: copy the GR config file on RHEL/CentOS/Amazon
    template: src=../../../../templates/group_replication.j2 dest=/etc/my.cnf.d/gr.cnf
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service: name=mysql state=restarted

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: re-run ps_admin to install rocksdb
    command: /usr/bin/ps-admin --enable-rocksdb

  - name: install plugins, import world database
#    command: /package-testing/plugins_test_80.sh ps
    command: /package-testing/plugins_test_innovation_lts.sh ps

  # - name: install audit_log v2 plugin
  #   command: mysql -uroot -NBe "source /usr/share/mysql/audit_log_filter_linux_install.sql;"

  - name: Update the DB engine
    command: mysql -uroot -NBe "USE world3;create table r1 (id int, foo char(25)) engine=rocksdb;insert into r1 (id,foo) values (1,'test'),(2,'wow'),(3,'q');"

  - name: enable the pdps-8.0 {{ repo }}
    command: percona-release enable pdps-8.0 {{ repo }}
    vars:
      repo: "{{ lookup('env', 'PS_INSTALL_REPO') }}"
    when: ansible_architecture == "x86_64"

  - name: install Orchestrator, proxysql2 and PXB deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-orchestrator-cli
      - percona-orchestrator-client
      - percona-orchestrator
      - percona-xtrabackup-84
    when: ansible_os_family == "Debian" and ansible_architecture == "x86_64"

  - name: install Orchestrator, proxysql2 and PXB rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-orchestrator-cli
      - percona-orchestrator-client
      - percona-orchestrator
      - percona-xtrabackup-84
    when: ansible_os_family == "RedHat" and ansible_architecture == "x86_64"

  - name: enable the pdpxc-8.0
    command: percona-release enable pdpxc-8.0
    vars:
      repo: "{{ lookup('env', 'PS_INSTALL_REPO') }}"
    when: ansible_distribution_release != "noble" and ansible_architecture == "x86_64"

  - name: install percona-haproxy rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - percona-haproxy
      - proxysql2
    when: ansible_os_family == "RedHat" and ansible_architecture == "x86_64"

  - name: install percona-haproxy deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-haproxy
      - proxysql2
    when: ansible_os_family == "Debian" and ansible_distribution_release != "noble" and ansible_architecture == "x86_64"

  - name: enable the pmm2-client repo
    command: percona-release enable pmm2-client
    when: ansible_architecture == "x86_64"

  - name: install PMM client rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - pmm2-client
    when: ansible_os_family == "RedHat" and ansible_architecture == "x86_64"

  - name: install PMM client deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - pmm2-client
    when: ansible_os_family == "Debian" and ansible_architecture == "x86_64"

