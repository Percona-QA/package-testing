pipeline {
  agent {
    label 'micro-amazon'
  }
  options { disableConcurrentBuilds() }
  environment {
    PATH='/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/ec2-user/.local/bin'
  }
  parameters {
    text(
      name: 'PLATFORMS',
      description: 'Test distributions',
      defaultValue: '''amazonlinux-2
centos-6
centos-7
debian-8
debian-9
debian-10
ubuntu-xenial
ubuntu-bionic'''
    )
    choice(
      name: 'INSTALL_REPO',
      description: 'Repo for package install',
      choices: [
        'testing',
        'main',
        'experimental',
      ]
    )
    choice(
      name: 'ROLE_NAME',
      description: 'Role to test',
      choices: [
        'ps-56-install',
        'ps-57-install',
        'ps-57-upgrade',
        'ps-57-maj-upgrade-to',
        'ps-57-maj-upgrade-from',
        'ps-80-install',
        'ps-80-maj-upgrade-to',
        'ps-80-upgrade',
      ]
    )
    booleanParam(
      name: 'MOLECULE_DEBUG',
      defaultValue: false,
      description: 'Run molecule in debug mode'
    )
  }
  stages {
    stage ('Prepare') {
      steps {
        script {
          currentBuild.displayName = "#${BUILD_NUMBER}-${ROLE_NAME}-${INSTALL_REPO}"
          currentBuild.description = "${PLATFORMS}".replaceAll("\n", " ");
        }
        checkout scm
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AMI/OVF', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh '''#!/bin/bash -e
              echo 'Installing dependencies'
              sudo yum install -y gcc python3-pip python3-devel libselinux-python openssl-devel
              sudo mkdir -p /usr/local/lib64/python3.7/site-packages
              sudo rsync -aHv /usr/lib64/python2.7/site-packages/*selinux* /usr/local/lib64/python3.7/site-packages/
              python3 -m pip install --user --upgrade pip setuptools
              python3 -m pip install --user pytest molecule==2.22 ansible wheel boto boto3 paramiko selinux 'molecule[ec2]==2.22'
          '''

          sh '''#!/bin/bash
              # remove this because otherwise molecule will fail to validate
              rm -f molecule/${ROLE_NAME}/molecule/default/molecule.yml

              REPLACE_STRING="##PLATFORM_PLACEHOLDER##"
              MOLECULE_FILE="molecule/${ROLE_NAME}/molecule/ec2/molecule.yml"
              #
              PS_56_INSTALL_DIST=(debian-8 debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_57_INSTALL_DIST=(debian-8 debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_57_UPGRADE_DIST=(debian-8 debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_57_MAJ_UPGRADE_TO_DIST=(debian-8 debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_57_MAJ_UPGRADE_FROM_DIST=(debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_80_INSTALL_DIST=(debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_80_UPGRADE_DIST=(debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              PS_80_MAJ_UPGRADE_TO_DIST=(debian-9 debian-10 centos-6 centos-7 ubuntu-xenial ubuntu-bionic amazonlinux-2)
              #
              ROLE_DIST="${ROLE_NAME//-/_}"
              ROLE_DIST="${ROLE_DIST^^}_DIST[@]"
              for PLATFORM in ${PLATFORMS}; do
                if [[ " ${!ROLE_DIST} " =~ " ${PLATFORM} " ]]; then
                  PL_PARAMS=$(grep -A6 "${PLATFORM}:" molecule/configuration.yml)
                  AWS_DEFAULT_REGION=$(echo "${PL_PARAMS}" | grep "aws_default_region:"|awk -F': ' '{print $2}' )
                  IMAGE=$(echo "${PL_PARAMS}" | grep "image:"|awk -F': ' '{print $2}' )
                  SUBNET=$(echo "${PL_PARAMS}" | grep "subnet:"|awk -F': ' '{print $2}' )
                  INSTANCE_TYPE=$(echo "${PL_PARAMS}" | grep "instance_type:"|awk -F': ' '{print $2}' )
                  ROOT_DEVICE_NAME=$(echo "${PL_PARAMS}" | grep "root_device_name:"|awk -F': ' '{print $2}' )
                  USER=$(echo "${PL_PARAMS}" | grep "user:"|awk -F': ' '{print $2}' )
                  #
                  sed -i "s/${REPLACE_STRING}/  - name: ${ROLE_NAME}-${PLATFORM}\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/    region: ${AWS_DEFAULT_REGION}\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/    image: ${IMAGE}\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/    vpc_subnet_id: ${SUBNET}\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/    instance_type: ${INSTANCE_TYPE}\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s!${REPLACE_STRING}!    root_device_name: ${ROOT_DEVICE_NAME}\\n${REPLACE_STRING}!" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/    ssh_user: ${USER}\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/    instance_tags:\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                  sed -i "s/${REPLACE_STRING}/      iit-billing-tag: jenkins-ps-pkg-worker\\n${REPLACE_STRING}/" ${MOLECULE_FILE}
                else
                  echo "##### Skipping ${PLATFORM} since not supported by role ${ROLE_NAME} #####"
                fi
              done
              echo "##### MOLECULE FILE CONTENT #####"
              cat ${MOLECULE_FILE}
              echo "#########################"
              cd molecule/${ROLE_NAME}
              python3 -m molecule list
              python3 -m molecule destroy -s ec2 || true
              if [ -d ~/.cache/molecule/${ROLE_NAME} ]; then
                rm -rf ~/.cache/molecule/${ROLE_NAME}
              fi
          '''
        }
      }
    }
    stage ('Create virtual machines') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'MOLECULE_AWS_PRIVATE_KEY', keyFileVariable: 'MOLECULE_AWS_PRIVATE_KEY', passphraseVariable: '', usernameVariable: ''), [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AMI/OVF', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh '''
              cd molecule/${ROLE_NAME}
              python3 -m molecule list
              python3 -m molecule create -s ec2
              python3 -m molecule list
          '''
        }
      }
    }
    stage ('Run playbook for test') {
      steps {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule converge -s ec2
        '''
      }
    }
    stage ('Start testinfra tests') {
      steps {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule verify -s ec2
        '''
        junit 'molecule/${ROLE_NAME}/molecule/ec2/*.xml'
      }
    }
    stage ('Start packages deletion') {
      steps {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule cleanup -s ec2
        '''
      }
    }
  }
  post {
    always {
      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AMI/OVF', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule destroy -s ec2
        '''
      }
      deleteDir()
    }
  }
}
