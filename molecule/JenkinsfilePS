pipeline {
  agent {
    label 'micro-amazon'
  }
  options { disableConcurrentBuilds() }
  environment {
    PATH='/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/home/ec2-user/.local/bin'
  }
  parameters {
    text(
      name: 'PLATFORMS',
      description: 'Test distributions',
      defaultValue: '''amazonlinux-2
centos-6
centos-7
debian-8
debian-9
debian-10
ubuntu-xenial
ubuntu-bionic'''
    )
    choice(
      name: 'INSTALL_REPO',
      description: 'Repo for package install',
      choices: [
        'testing',
        'main',
        'experimental',
      ]
    )
    choice(
      name: 'ROLE_NAME',
      description: 'Role to test',
      choices: [
        'ps-56-install',
        'ps-57-install',
        'ps-57-upgrade',
        'ps-57-maj-upgrade-to',
        'ps-57-maj-upgrade-from',
        'ps-80-install',
        'ps-80-maj-upgrade-to',
        'ps-80-upgrade',
      ]
    )
    booleanParam(
      name: 'MOLECULE_DEBUG',
      defaultValue: false,
      description: 'Run molecule in debug mode'
    )
  }
  stages {
    stage ('Prepare') {
      steps {
        script {
          currentBuild.displayName = "#${BUILD_NUMBER}-${ROLE_NAME}-${INSTALL_REPO}"
          currentBuild.description = "${PLATFORMS}".replaceAll("\n", " ");
        }
        checkout scm
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AMI/OVF', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh '''#!/bin/bash -e
              echo 'Installing dependencies'
              sudo yum install -y gcc python3-pip python3-devel libselinux-python openssl-devel
              sudo mkdir -p /usr/local/lib64/python3.7/site-packages
              sudo rsync -aHv /usr/lib64/python2.7/site-packages/*selinux* /usr/local/lib64/python3.7/site-packages/
              python3 -m pip install --user --upgrade pip setuptools
              python3 -m pip install --user pytest molecule==2.22 ansible wheel boto boto3 paramiko selinux 'molecule[ec2]' 'j2cli[yaml]'
          '''

          sh '''#!/bin/bash
              # remove this because otherwise molecule will fail to validate
              rm -f molecule/${ROLE_NAME}/molecule/default/molecule.yml

              TEMPLATE="molecule/${ROLE_NAME}/molecule/ec2/molecule.yml.j2"
              TEMPLATE_OUTFILE="molecule/${ROLE_NAME}/molecule/ec2/molecule.yml"
              TEMPLATE_CONFIGURATION="molecule/configuration.yml"
              j2 -f yaml $TEMPLATE $TEMPLATE_CONFIGURATION > $TEMPLATE_OUTFILE
              
              echo "##### MOLECULE FILE CONTENT #####"
              cat ${TEMPLATE_OUTFILE}
              echo "#########################"
              cd molecule/${ROLE_NAME}
              python3 -m molecule list
              python3 -m molecule destroy -s ec2 || true
              if [ -d ~/.cache/molecule/${ROLE_NAME} ]; then
                rm -rf ~/.cache/molecule/${ROLE_NAME}
              fi
          '''
        }
      }
    }
    stage ('Create virtual machines') {
      steps {
        withCredentials([sshUserPrivateKey(credentialsId: 'MOLECULE_AWS_PRIVATE_KEY', keyFileVariable: 'MOLECULE_AWS_PRIVATE_KEY', passphraseVariable: '', usernameVariable: ''), [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AMI/OVF', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
          sh '''
              cd molecule/${ROLE_NAME}
              python3 -m molecule list
              python3 -m molecule create -s ec2
              python3 -m molecule list
          '''
        }
      }
    }
    stage ('Run playbook for test') {
      steps {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule converge -s ec2
        '''
      }
    }
    stage ('Start testinfra tests') {
      steps {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule verify -s ec2
        '''
        junit 'molecule/${ROLE_NAME}/molecule/ec2/*.xml'
      }
    }
    stage ('Start packages deletion') {
      steps {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule cleanup -s ec2
        '''
      }
    }
  }
  post {
    always {
      withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'AMI/OVF', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']]) {
        sh '''
            cd molecule/${ROLE_NAME}
            python3 -m molecule list
            python3 -m molecule destroy -s ec2
        '''
      }
      deleteDir()
    }
  }
}
