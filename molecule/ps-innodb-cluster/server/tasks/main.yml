---
# tasks file for ps-innodb-cluster-server
  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - set_fact:
      UPSTREAM_VERSION: "{{ lookup('env', 'UPSTREAM_VERSION') }}"
      gnupg_home: "/root/.gnupg"
      percona_key1: "4D1BB29D63D98E422B2113B19334A25F8507EFA5"
      percona_key1_file: "/root/.gnupg/PERCONA-PACKAGING-KEY"

  - name: Determine Percona Server major version
    set_fact:
      PS_MAJ_VER: "{{ UPSTREAM_VERSION | regex_replace('^([0-9]+)\\.([0-9]+)\\..*$', '\\1\\2') if '8.4' in UPSTREAM_VERSION else 8 }}"

  - name: Print Percona Server major version
    debug:
      var: PS_MAJ_VER

  - name: include tasks for enabling PS 80/84 main repo
    include_tasks: ../../../../tasks/enable_ps{{ PS_MAJ_VER }}_main_repo.yml
    when: lookup('env', 'INSTALL_REPO') == "main"

  - name: include tasks for enabling PS 80/84 test repo
    include_tasks: ../../../../tasks/enable_ps{{ PS_MAJ_VER }}_testing_repo.yml
    when: lookup('env', 'INSTALL_REPO') == "testing" or lookup('env', 'INSTALL_REPO') == ""

  - name: include tasks for enabling PS 80/84 experimental repo
    include_tasks: ../../../../tasks/enable_ps{{ PS_MAJ_VER }}_experimental_repo.yml
    when: lookup('env', 'INSTALL_REPO') == "experimental"

  - name: setup hosts file
    copy:
      content: |
        127.0.0.1 {{ ansible_hostname }} localhost
        {{ lookup('env','PS_NODE1_IP') }} ps-node1
        {{ lookup('env','PS_NODE2_IP') }} ps-node2
        {{ lookup('env','PS_NODE3_IP') }} ps-node3
        {{ lookup('env','MYSQL_ROUTER_IP') }} mysql-router
        {% for var in ['PS_NODE1_IP', 'PS_NODE2_IP', 'PS_NODE3_IP', 'MYSQL_ROUTER_IP'] %}
        {{ lookup('env', var) }} ip-{{ lookup('env', var) | replace('.', '-') }}
        {{ lookup('env', var) }} ip-{{ lookup('env', var) | replace('.', '-') }}.us-west-2.compute.internal
        {% endfor %}
        ::1     localhost ip6-localhost ip6-loopback
        ff02::1 ip6-allnodes
        ff02::2 ip6-allrouters
      dest: /etc/hosts
      force: yes
      group: root
      owner: root
      mode: 0644

  - name: install Percona Server deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - percona-server-server
      - percona-server-test
      - percona-server-source
      - percona-server-client
      - percona-server-rocksdb
    when: ansible_os_family == "Debian"

  - name: install Percona Server rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-server-server
      - percona-server-client
      - percona-server-test
      - percona-server-devel
      - percona-server-rocksdb
    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service:
      name: mysql
      state: started

  - name: setup mysql user on Centos/RedHat
    shell: |
      mysql --connect-expired-password -uroot --password="$(grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}')" -e "ALTER USER 'root'@'localhost' IDENTIFIED BY 'Test1234#';"
      mysql -uroot -pTest1234# -e "create user root@'%' identified with caching_sha2_password by 'Test1234#'"
      mysql -uroot -pTest1234# -e "grant all privileges on *.* to root@'%' with grant option;"
      mysql -uroot -pTest1234# -e "create user sysbench@'%' identified by 'Test1234#'"
      mysql -uroot -pTest1234# -e "grant all privileges on *.* to sysbench@'%';"
    when: ansible_os_family == "RedHat"

  - name: setup mysql user on Debian/Ubuntu
    shell: |
      mysql -uroot -pTest1234# -e "create user root@'%' identified with caching_sha2_password by 'Test1234#'"
      mysql -uroot -pTest1234# -e "grant all privileges on *.* to root@'%' with grant option;"
      mysql -uroot -pTest1234# -e "create user sysbench@'%' identified by 'Test1234#'"
      mysql -uroot -pTest1234# -e "grant all privileges on *.* to sysbench@'%';"
      mysql -uroot -pTest1234# -e "alter user root@localhost identified with caching_sha2_password by 'Test1234#';"
    when: ansible_os_family == "Debian"

  - name: add options to my.cnf on Debian/Ubuntu
    blockinfile:
      path: /etc/mysql/my.cnf
      block: |
        [mysqld]
        plugin_load_add='group_replication.so'
        server_id={{ 10000 | random }}
        binlog_checksum=NONE
        enforce_gtid_consistency=ON
        gtid_mode=ON
        group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
        group_replication_start_on_boot=OFF
        relay_log={{ ansible_hostname }}-relay-bin
    when: ansible_os_family == "Debian"

  - name: add options to my.cnf on Centos/RedHat
    blockinfile:
      path: /etc/my.cnf
      block: |
        plugin_load_add='group_replication.so'
        server_id={{ 4294967295 | random }}
        binlog_checksum=NONE
        enforce_gtid_consistency=ON
        gtid_mode=ON
        group_replication_group_name="aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"
        group_replication_start_on_boot=OFF
        relay_log={{ ansible_hostname }}-relay-bin
    when: ansible_os_family == "RedHat"

  - name: allow all users to connect to mysql
    shell: setsebool -P mysql_connect_any 1
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service:
      name: mysql
      state: restarted
