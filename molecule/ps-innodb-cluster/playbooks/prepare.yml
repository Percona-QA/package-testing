---
- name: Prepare node for running tests
  hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  tasks:
    - name: add the Vault and epel CentOS 6 repos
      shell: |
        curl https://www.getpagespeed.com/files/centos6-eol.repo --output /etc/yum.repos.d/CentOS-Base.repo
        curl https://www.getpagespeed.com/files/centos6-epel-eol.repo --output /etc/yum.repos.d/epel.repo
        yum -y install centos-release-scl
        curl https://www.getpagespeed.com/files/centos6-scl-eol.repo --output /etc/yum.repos.d/CentOS-SCLo-scl.repo
        curl https://www.getpagespeed.com/files/centos6-scl-rh-eol.repo --output /etc/yum.repos.d/CentOS-SCLo-scl-rh.repo
        yum -y install epel-release.noarch
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

    - name: install GPG key for epel 8
      rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

    - name: install GPG key for Percona repos
      rpm_key:
        state: present
        key: https://repo.percona.com/yum/RPM-GPG-KEY-Percona
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

    - name: setup epel 8 repo
      dnf: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm state=present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

    - name: install GPG key for epel 9
      rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "9"

    - name: setup epel 9 repo
      dnf: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm state=present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "9"

    - name: install GPG key for epel 10
      rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-10
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "10"

    - name: setup epel 10 repo
      dnf: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-10.noarch.rpm state=present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "10"

    - name: setup ca-certificates release yum
      yum:
        name: ca-certificates
        update_cache: yes
        state: present
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int <= 7

    - name: setup ca-certificates release dnf
      dnf:
        name: ca-certificates
        update_cache: yes
        state: present
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int >= 8

    - name: setup epel release centos 7 yum
      yum:
        name: epel-release
        update_cache: yes
        state: present
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int <= 7

    - name: setup epel release centos dnf
      dnf:
        name: epel-release
        update_cache: yes
        state: present
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int >= 8

    - name: buster workaround
      shell: |
        apt -y update --allow-releaseinfo-change || true 
      when: ansible_os_family == "Debian" and ansible_distribution_release == "buster"

    - name: install needed packages for running tests with apt
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
          - unzip
          - wget
          - gnupg
          - gnupg2
          - rsync
          - acl
          - jq
      retries: 60
      delay: 10
      register: result
      until: result is not failed
      when: ansible_os_family == "Debian"

    - name: update systemd-sysv integration on debian/ubuntu
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - systemd-sysv
      when: ansible_os_family == "Debian" and ansible_distribution_release != "trusty"

    - name: install needed packages for running tests with yum
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - pv
          - libselinux-python
          - unzip
          - wget
          - rsync
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int <= 7

    - name: install needed packages for running tests on RHEL8 dnf
      dnf:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - unzip
        - wget
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int >= 8

    - name: flush iptables
      iptables:
        flush: yes
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int <= 7

    - name: disable firewalld 
      service:
        name: firewalld
        state: stopped
      when: 
        - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
        - ansible_facts['distribution_major_version'] | int >= 8
        - ansible_facts['services']['firewalld.service'] is defined

    - name: update cache
      command: apt-get update
      when: ansible_os_family == "debian"

    - name: update cache 
      shell: "{{ ansible_pkg_mgr }} makecache"
      when: ansible_os_family == "RedHat" 

    - name: Setup SSH keys for Oracle Linux or Amazon
      authorized_key:
        user: ec2-user
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: ansible_os_family == "RedHat"

    - name: Setup SSH keys CentOS
      authorized_key:
        user: centos
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: ansible_distribution == "CentOS"

    - name: Setup SSH keys Debian
      authorized_key:
        user: admin
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: ansible_distribution == "Debian"

    - name: Setup SSH keys Ubuntu
      authorized_key:
        user: ubuntu
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: ansible_distribution == "Ubuntu"
