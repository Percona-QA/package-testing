---
  - name: Fetch the vars from file for upgrade
    ansible.builtin.include_vars: "{{ ENV_VAR_PATH }}"

  - set_fact:
      man_ip: "{{ PXC1_IP }}"
    when: 
    - "'pxc1' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC2_IP }}"
    when: 
    - "'pxc2' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC3_IP }}"
    when: 
    - "'pxc3' in inventory_hostname"

  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

#-------------non pro
  - name: include tasks for enabling test repo pxc84 non pro
    include_tasks: ../../../../tasks/enable_pxc84_testing_repo.yml
    when:
    - lookup('env', 'install_repo') == "testing" 
    - lookup('env', 'pro') == "no"

  - name: include tasks for enabling main repo pxc84 non pro
    include_tasks: ../../../../tasks/enable_pxc84_main_repo.yml
    when: 
    - lookup('env', 'install_repo') == "main" or lookup('env', 'install_repo') == ""
    - lookup('env', 'pro') == "no"

  - name: include tasks for enabling experimental repo non pro
    include_tasks: ../../../../tasks/enable_pxc84_experimental_repo.yml
    when: 
    - lookup('env', 'install_repo') == "experimental"
    - lookup('env', 'pro') == "no"
#-----------------pro

  - name: include tasks for enabling test repo pro pxc84
    include_tasks: ../../../../tasks/enable_pxc84_pro_repo_testing.yml
    when: 
    - lookup('env', 'install_repo') == "testing" 
    - lookup('env', 'pro') == "yes"

  - name: include tasks for enabling main repo pro pxc84
    include_tasks: ../../../../tasks/enable_pxc84_pro_repo_main.yml
    when: 
    - lookup('env', 'install_repo') == "main" or lookup('env', 'install_repo') == ""
    - lookup('env', 'pro') == "yes"

#---------------------

  - name: install python3-libselinux 
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - python3-libselinux
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: allow all users to connect to mysql
    shell: setsebool -P mysql_connect_any 1
    when: ((ansible_os_family == "RedHat") and (ansible_distribution != "Amazon"))

  - name: flush iptables
    iptables:
      flush: yes
    when: (ansible_os_family == "RedHat") and (ansible_facts['distribution'] == "OracleLinux")

  - name: Generate required locales
    command: locale-gen "{{ item }}"
    loop:
      - en_US.UTF-8
      - en_IN.utf8
    args:
      creates: "/usr/lib/locale/{{ item }}"
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

  - name: Ensure /etc/default/locale file is updated
    lineinfile:
      path: /etc/default/locale
      create: yes
      line: "{{ item }}"
    loop:
      - 'LANG="en_US.UTF-8"'
      - 'LC_ALL="en_US.UTF-8"'
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

  - name: Create empty usr.sbin.mysqld.in file to avoid AppArmor error
    file:
      path: /etc/apparmor.d/local/usr.sbin.mysqld.in
      state: touch
      mode: '0644'
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

#---------------------------------------------------------non-pro
  - name: install PXC 8 deb packages arm64 debian non pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-xtrabackup-84
      - percona-toolkit
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "aarch64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      
  - name: install PXC 8 deb packages amd64 non pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-xtrabackup-84
      - percona-toolkit
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "x86_64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: install PXC 8 rpm packages amd64 non pro
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
      - percona-xtrabackup-84
    when: 
      - ansible_os_family == "RedHat" 
      - ansible_architecture == "x86_64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: install PXC 8 rpm packages arm OS non pro
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-xtrabackup-84
    when: 
      - ansible_os_family == "RedHat"
      - ansible_architecture == "aarch64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
#--------------------------------------------------------------------------------------------

#----------------------------------pro
  - name: install PXC 8 deb packages arm64 debian pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-pro-full
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "aarch64"
      - lookup('env', 'pro') == "yes"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      
  - name: install PXC 8 deb packages amd64 pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-pro-full
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "x86_64"
      - lookup('env', 'pro') == "yes"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: install PXC 8 rpm packages amd64 pro
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-xtradb-cluster-pro-full
    when: 
      - ansible_os_family == "RedHat" 
      - ansible_architecture == "x86_64"
      - lookup('env', 'pro') == "yes"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: install PXC 8 rpm packages arm OS pro
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-xtradb-cluster-pro-full
    when: 
      - ansible_os_family == "RedHat"
      - ansible_architecture == "aarch64"
      - lookup('env', 'pro') == "yes"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
#--------------------------------------------------------------------------------------------



  - name: stop mysql service with service command
    command: systemctl stop mysql

  - name: copy pxc config on centos
    template: src=../../../../templates/my_rpm_80.j2 dest=/etc/my.cnf
    when: ansible_os_family == "RedHat"

  - name: copy pxc certs
    copy:
      src: ../../../../support-files/certs/
      dest: /etc/mysql/certs/

  - name: configure PXC on debian/ubuntu
    template: src=../../../../templates/my_8.j2
              dest=/etc/mysql/my.cnf
              mode=0640 owner=mysql group=root
    when: ansible_os_family == "Debian"

  # bootstrap the cluster
  - name: bootstrap cluster on CentOS
    command: systemctl start mysql@bootstrap.service

  # set root password on centos
  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../../../../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  # other tests
# - name: install plugins
#   command: /package-testing/plugins_test_80.sh pxc

  - name: register PXC version Molecule
    shell: mysqld --version
    register: pxc_version

  - name: print PXC version Molecule
    debug: var=pxc_version

#  - name: check PXC 8.0 version Molecule
#    command: /package-testing/version_check.sh pxc84
#    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""
      
  - name: Sleep 60 seconds
    command: sleep 60
