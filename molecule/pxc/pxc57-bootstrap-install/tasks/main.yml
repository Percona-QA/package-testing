---
  - name: Fetch the vars from file
    ansible.builtin.include_vars: "{{ ENV_VAR_PATH }}"

  - set_fact:
      man_ip: "{{ PXC1_IP }}"
    when: 
    - "'pxc1' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC2_IP }}"
    when: 
    - "'pxc2' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC3_IP }}"
    when: 
    - "'pxc3' in inventory_hostname"

  - debug: var=man_ip
    
  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

#
  - name: include tasks for enabling test repo
    include_tasks: ../../../../tasks/enable_pxc57_testing_repo.yml
    when: (lookup('env', 'install_repo') == "testing" and lookup('env', 'pxc57repo') != "EOL") or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling main repo
    include_tasks: ../../../../tasks/enable_pxc57_main_repo.yml
    when: lookup('env', 'install_repo') == "main" and lookup('env', 'pxc57repo') != "EOL"

  - name: include tasks for enabling experimental repo
    include_tasks: ../../../../tasks/enable_pxc57_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental" and lookup('env', 'pxc57repo') != "EOL"

##

  - name: include tasks for enabling EOL repo
    include_tasks: ../../../../tasks/enable_pxc57_eol_tools_repo.yml
    when: lookup('env', 'pxc57repo') == "EOL"

  - name: disable selinux
    selinux: state=disabled
    when: ansible_os_family == "RedHat"

  - name: flush iptables
    iptables:
      flush: yes
    when: (ansible_os_family == "RedHat") and (ansible_facts['distribution'] == "OracleLinux")

  - name: update apt cache debian
    apt:
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: update rpm cache redhat
    yum:
      update_cache: yes
    when: ansible_os_family == "RedHat" 
##

  - name: install PXC 5.7 deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full-57
      - percona-xtradb-cluster-57
    when: ansible_os_family == "Debian"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: install python mysql deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - python-mysqldb
    when: (ansible_os_family == "Debian") and (ansible_distribution_release != "focal" and ansible_distribution_release != "bionic" and ansible_distribution_release != "bullseye" and ansible_distribution_release != "buster" and ansible_distribution_release != "jammy" and ansible_distribution_release != "bookworm")

  - name: install python mysql deb packages for focal and bionic
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - python3-mysqldb
    when: (ansible_os_family == "Debian") and (ansible_distribution_release == "focal" or ansible_distribution_release == "bionic" or ansible_distribution_release == "bullseye" or ansible_distribution_release == "jammy" or ansible_distribution_release == "bookworm")

  - name: Install python3 PyMySQL for Buster (Debian 10)
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - python3-pymysql
    when: (ansible_os_family == "Debian") and (ansible_distribution_release == "buster")

  - name: install PXC 5.7 rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - Percona-XtraDB-Cluster-full-57
      - Percona-XtraDB-Cluster-57
    when: ansible_os_family == "RedHat"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: check telemetry (enabled)
    command: /package-testing/check_telemetry.sh pxc -e

  - name: get telemetry_uuid content
    command: cat /usr/local/percona/telemetry_uuid
    register: t_uuid_output

  - name: output telemetry_uuid content
    debug:
      var: t_uuid_output

  - name: install python mysql rpm packages for CentOS 6 and 7
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - MySQL-python
    when: ansible_os_family == "RedHat" and (ansible_distribution_major_version != "8" and ansible_distribution_major_version != "9")

  - name: install python mysql rpm packages for CentOS 8
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - python3-PyMySQL
    when: ansible_os_family == "RedHat" and (ansible_distribution_major_version == "8" or ansible_distribution_major_version == "9")

  - name: stop mysql service with service command
    command: systemctl stop mysql

  - name: copy pxc config on centos 6
    template: src=../../../../templates/my_rpm.j2 dest=/etc/my.cnf
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: copy pxc config on centos 7
    template:
      src: ../../../../templates/my_rpm_7.j2 
      dest: /etc/my.cnf
    when: ((ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7") or (ansible_distribution == "Amazon"))

  - name: configure PXC on debian/ubuntu
    template: 
      src: ../../../../templates/my.j2
      dest: /etc/mysql/my.cnf
      mode: 0640
      owner: mysql
      group: root
    when: ansible_os_family == "Debian"

  # bootstrap the cluster

  - name: bootstrap cluster on RHEL7
    command: systemctl start mysql@bootstrap.service
    when: ansible_os_family == "RedHat"
    
  - name: run the bootstrap service on debian/ubuntu
    command: service mysql bootstrap-pxc
    when: ansible_os_family == "Debian"

  # set root password on centos
  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: 
      src: ../../../../templates/my_57.j2
      dest: /root/.my.cnf
      mode: 0640 
      owner: root 
      group: root
    when: ansible_os_family == "RedHat"

  # add sstuser

  - name: create backup user on centos 7
    command: /package-testing/pxc_backup_user.sh
    when: ((ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7") or (ansible_distribution == "Amazon"))

  - name: create backup user on debian/ubuntu
    mysql_user:
      login_unix_socket: /var/run/mysqld/mysqld.sock
      name: sstuser 
      password: s3cretPass 
      priv: "*.*:RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT" 
      state: present
    become: yes
    when: ansible_os_family == "Debian"

  # other tests
#  - name: install plugins
#    command: /package-testing/plugins_test_57.sh pxc

  - name: register PXC version
    shell: mysqld --version
    register: pxc_version

  - name: print PXC version
    debug: var=pxc_version
    
  - name: check PXC 5.7 version
    command: /package-testing/version_check.sh pxc57
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""





