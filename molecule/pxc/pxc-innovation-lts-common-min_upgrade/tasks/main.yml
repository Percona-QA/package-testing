---

  - name: Fetch the vars from file
    ansible.builtin.include_vars: "{{ ENV_VAR_PATH }}"

  - set_fact:
      man_ip: "{{ PXC1_IP }}"
    when: 
    - "'pxc1' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC2_IP }}"
    when: 
    - "'pxc2' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC3_IP }}"
    when: 
    - "'pxc3' in inventory_hostname"

  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: Extract version number using shell commands
    shell: grep -oP 'PXC_INN_LTS_VER="\K(\d+)\.(\d+)' /package-testing/VERSIONS | tr -d '.'
    register: major_release_version

  - name: Set major_release_version variable
    set_fact:
      major_release_version: "{{ major_release_version.stdout }}"

  - name: Extract values using shell command for repo name used for innovation/lts release
    shell: grep 'PXC_INN_LTS_REPO=' /package-testing/VERSIONS | cut -d'=' -f2 | tr -d '"'
    register: pxc_inn_lts_repo_name

  - name: Set pxc_inn_lts_repo_name variable
    set_fact:
      pxc_inn_lts_repo_name: "{{ pxc_inn_lts_repo_name.stdout }}"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: include tasks for enabling test repo pxc 84
    include_tasks: ../../../../tasks/enable_pxc84_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" 

  - name: include tasks for enabling main repo pxc 84
    include_tasks: ../../../../tasks/enable_pxc84_main_repo.yml
    when: lookup('env', 'install_repo') == "main" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo pxc 84
    include_tasks: ../../../../tasks/enable_pxc84_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: allow all users to connect to mysql
    shell: setsebool -P mysql_connect_any 1
    when: ((ansible_os_family == "RedHat") and (ansible_distribution != "Amazon"))

  - name: flush iptables
    iptables:
      flush: yes
    when: (ansible_os_family == "RedHat") and (ansible_facts['distribution'] == "OracleLinux")

  - name: install PXC {{ major_release_version}} deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-xtradb-cluster-source
      - percona-toolkit
      - percona-xtrabackup-{{ major_release_version}}
    when: ansible_os_family == "Debian"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      PERCONA_TELEMETRY_DISABLE: "1"

  - name: install PXC {{ major_release_version}} rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
    when: ansible_os_family == "RedHat"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      PERCONA_TELEMETRY_DISABLE: "1"

  - name: copy PXC config on centos 7
    template: src=../../../../templates/my_rpm_80.j2 
              dest=/etc/my.cnf
    when: ansible_os_family == "RedHat"

  - name: copy PXC config on debian/ubuntu
    template: src=../../../../templates/my_8.j2
              dest=/etc/mysql/my.cnf
              mode=0640 owner=mysql group=root
    when: ansible_os_family == "Debian"

  - name: copy .my.cnf with credentials
    template: src=../../../../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: copy pxc certs
    copy:
      src: ../../../../support-files/certs/
      dest: /etc/mysql/certs/

  - name: start mysql service
    service: name=mysql state=started
    throttle: 1

  - name: check that PXC version is correct Molecule
    command: /package-testing/version_check.sh pxc{{ major_release_version}}
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

  - name: check that PXC package versions are correct Molecule
    command: /package-testing/package_check.sh pxc{{ major_release_version}}
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

  - name: run bats tests for mysql init scripts
    shell: sleep {{ sleep_before_tests | default('0') }}; /usr/local/bin/bats /package-testing/bats/pxc-init-scripts.bats
    throttle: 1

  - name: start mysql service
    service: name=mysql state=started
    throttle: 1

  - name: Check that the PXC Cluster is up and running
    shell: mysql -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size';" | awk '{print$2}' | sed -n '2 p' | grep '3'


