---
  - name: Fetch the vars from file for install
    ansible.builtin.include_vars: "{{ ENV_VAR_PATH }}"
      
  - set_fact:
      man_ip: "{{ PXC1_IP }}"
    when: 
    - "'pxc1' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC2_IP }}"
    when: 
    - "'pxc2' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC3_IP }}"
    when: 
    - "'pxc3' in inventory_hostname"

  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: include tasks for enabling test repo pxc80 non pro
    include_tasks: ../../../../tasks/enable_pxc_innovation_lts_testing_repo.yml
    when:
    - lookup('env', 'install_repo') == "testing" 
    - lookup('env', 'pro') == "no"

  - name: include tasks for enabling main repo pxc80 non pro
    include_tasks: ../../../../tasks/enable_pxc_innovation_lts_main_repo.yml
    when: 
    - lookup('env', 'install_repo') == "main" or lookup('env', 'install_repo') == ""
    - lookup('env', 'pro') == "no"

  - name: include tasks for enabling experimental repo non pro
    include_tasks: ../../../../tasks/enable_pxc_innovation_lts_experimental_repo.yml
    when: 
    - lookup('env', 'install_repo') == "experimental"
    - lookup('env', 'pro') == "no"

  - name: Generate required locales
    command: locale-gen "{{ item }}"
    loop:
      - en_US.UTF-8
      - en_IN.utf8
    args:
      creates: "/usr/lib/locale/{{ item }}"
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

  - name: Ensure /etc/default/locale file is updated
    lineinfile:
      path: /etc/default/locale
      create: yes
      line: "{{ item }}"
    loop:
      - 'LANG="en_US.UTF-8"'
      - 'LC_ALL="en_US.UTF-8"'
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

  - name: Create empty usr.sbin.mysqld.in file to avoid AppArmor error
    file:
      path: /etc/apparmor.d/local/usr.sbin.mysqld.in
      state: touch
      mode: '0644'
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"


  - name: install PXC 8 deb packages arm64 debian non pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "aarch64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      
  - name: install PXC 8 deb packages amd64 non pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "x86_64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: check telemetry (enabled)
    command: /package-testing/check_telemetry.sh pxc -e

  - name: get telemetry_uuid content
    command: cat /usr/local/percona/telemetry_uuid
    register: t_uuid_output

  - name: output telemetry_uuid content
    debug:
      var: t_uuid_output

  - name: copy pxc config on centos
    template: src=../../../../templates/my_rpm_80.j2 dest=/etc/my.cnf
    when: ansible_os_family == "RedHat"

  - name: copy pxc certs
    copy:
      src: ../../../../support-files/certs/
      dest: /etc/mysql/certs/

  - name: Safely configure custom my.cnf for Debian/Ubuntu
    template:
      src: ../../../../templates/my_8.j2
      dest: /etc/mysql/conf.d/custom.cnf
      mode: '0644'
      owner: root
      group: root
    when: ansible_os_family == "Debian"

  - name: bootstrap cluster on CentOS
    command: systemctl start mysql@bootstrap.service

  - name: register PXC version Molecule
    shell: mysqld --version
    register: pxc_version

  - name: print PXC version Molecule
    debug: var=pxc_version

  - name: Extract only the major.minor.patch version from mysqld --version
    set_fact:
      pxc_version_parsed: "{{ pxc_version.stdout | regex_search('Ver\\s+(\\d+\\.\\d+\\.\\d+)', '\\1') }}"
    
  - name: Print parsed PXC version
    debug:
      msg: "Parsed PXC version is: {{ pxc_version_parsed }}"

  - name: PRINT WSREP version
    shell: mysql -uroot --password='U?fY)9s7|3gxUm' -e "SHOW STATUS LIKE 'wsrep_provider_version';"
    register: wsrep_version
  
  - name: print WSREP version debug
    debug: var=wsrep_version

  - name: PRINT INNODB version
    shell: mysql -uroot --password='U?fY)9s7|3gxUm' -e "SELECT @@INNODB_VERSION;"
    register: innod_version

  - name: print INNODB version debug  
    debug: var=innod_version

  - name: stop mysql service with service command
    command: systemctl stop mysql

  - name: Extract version number using shell commands
    shell: grep -oP 'PXC_INN_LTS_VER="\K(\d+)\.(\d+)' /package-testing/VERSIONS | tr -d '.'
    register: major_release_version

  - name: Set major_release_version variable
    set_fact:
      major_release_version: "{{ major_release_version.stdout }}"

  - name: Extract values using shell command for repo name used for innovation/lts release
    shell: grep 'PXC_INN_LTS_REPO=' /package-testing/VERSIONS | cut -d'=' -f2 | tr -d '"'
    register: pxc_inn_lts_repo_name

  - name: Set pxc_inn_lts_repo_name variable
    set_fact:
      pxc_inn_lts_repo_name: "{{ pxc_inn_lts_repo_name.stdout }}"

  
  - name: check PXC 8.0 version Molecule
    command: /package-testing/version_check.sh pxc{{ major_release_version}}
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""


  - name: Verify telemetry version and package installation
    command: /package-testing/check_tel_ver_pack.sh
    when:
      - ansible_distribution != "Amazon"
      - ansible_distribution_major_version|int != 7

  - name: Sleep 60 seconds
    command: sleep 60
