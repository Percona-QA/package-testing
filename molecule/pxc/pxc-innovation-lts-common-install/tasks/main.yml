---
  - name: Fetch the vars from file
    ansible.builtin.include_vars: "{{ ENV_VAR_PATH }}"

  - set_fact:
      man_ip: "{{ PXC1_IP }}"
    when: 
    - "'pxc1' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC2_IP }}"
    when: 
    - "'pxc2' in inventory_hostname"

  - set_fact:
      man_ip: "{{ PXC3_IP }}"
    when: 
    - "'pxc3' in inventory_hostname"

  - name: include tasks for test env setup
    include_tasks: ../../../../tasks/test_prep.yml

  - name: Extract version number using shell commands
    shell: grep -oP 'PXC_INN_LTS_VER="\K(\d+)\.(\d+)' /package-testing/VERSIONS | tr -d '.'
    register: major_release_version

  - name: Set major_release_version variable
    set_fact:
      major_release_version: "{{ major_release_version.stdout }}"

  - name: Extract values using shell command for repo name used for innovation/lts release
    shell: grep 'PXC_INN_LTS_REPO=' /package-testing/VERSIONS | cut -d'=' -f2 | tr -d '"'
    register: pxc_inn_lts_repo_name

  - name: Set pxc_inn_lts_repo_name variable
    set_fact:
      pxc_inn_lts_repo_name: "{{ pxc_inn_lts_repo_name.stdout }}"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: include tasks for enabling test repo
    include_tasks: ../../../../tasks/enable_pxc_innovation_lts_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" 

  - name: include tasks for enabling main repo
    include_tasks: ../../../../tasks/enable_pxc_innovation_lts_main_repo.yml
    when: lookup('env', 'install_repo') == "main" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../../../../tasks/enable_pxc_innovation_lts_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: Generate required locales
    command: locale-gen "{{ item }}"
    loop:
      - en_US.UTF-8
      - en_IN.utf8
    args:
      creates: "/usr/lib/locale/{{ item }}"
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

  - name: Ensure /etc/default/locale file is updated
    lineinfile:
      path: /etc/default/locale
      create: yes
      line: "{{ item }}"
    loop:
      - 'LANG="en_US.UTF-8"'
      - 'LC_ALL="en_US.UTF-8"'
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

  - name: Create empty usr.sbin.mysqld.in file to avoid AppArmor error
    file:
      path: /etc/apparmor.d/local/usr.sbin.mysqld.in
      state: touch
      mode: '0644'
    when: 
      - ansible_architecture == "aarch64" or ansible_architecture == "arm64"
      - ansible_os_family == "Debian"

# resolving qpress error
  - name: enable the pdpxc-80 main repo for qpress in noble
    command: percona-release enable pdpxc-8.0 release
    when: ansible_distribution_release == "noble"

  - name: install PXC {{ major_release_version}} deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-xtradb-cluster-source
      - percona-toolkit
    when: ansible_os_family == "Debian"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      PERCONA_TELEMETRY_DISABLE: "1"


  - name: check telemetry (disabled)
    command: /package-testing/check_telemetry.sh pxc -d

  - name: copy PXC config on centos 7
    template: src=../../../../templates/my_rpm_80.j2 
              dest=/etc/my.cnf
    when: ansible_os_family == "RedHat"

  - name: copy PXC config on debian/ubuntu
    template: src=../../../../templates/my_8.j2
              dest=/etc/mysql/my.cnf
              mode=0640 owner=mysql group=root
    when: ansible_os_family == "Debian"

  - name: copy .my.cnf with credentials
    template: src=../../../../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: copy pxc certs
    copy:
      src: ../../../../support-files/certs/
      dest: /etc/mysql/certs/

  - name: start mysql service
    service: name=mysql state=started
    throttle: 1

  
  - name: start mysql service
    service: name=mysql state=started
    throttle: 1
    
  - name: register PXC version Molecule
    shell: mysqld --version
    register: pxc_version

  - name: print PXC version Molecule
    debug: var=pxc_version


  - name: check that PXC version is correct Molecule
    command: /package-testing/version_check.sh pxc{{ major_release_version}}
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

  - name: check that PXC package versions are correct Molecule
    command: /package-testing/package_check.sh pxc{{ major_release_version}}
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

#  - name: Perform PXC package prechecks
#    command: /package-testing/scripts/pxc-package-prechecks.sh pxc{{ major_release_version}}

  - name: run bats tests for mysql init scripts
    shell: sleep {{ sleep_before_tests | default('0') }}; /usr/local/bin/bats /package-testing/bats/pxc-init-scripts.bats
    throttle: 1

  - name: start mysql service
    service: name=mysql state=started
    throttle: 1

  - name: Check that the PXC Cluster is up and running
    shell: mysql -e "SHOW GLOBAL STATUS LIKE 'wsrep_cluster_size';" | awk '{print$2}' | sed -n '2 p' | grep '3'

## Changes done for telemetry: remove pxc package - add iptables rule for Telemetry Server - install only pxc package.
## Expected resuld - telemetry_uuid file has only instanceID
  - name: install PXC 8 deb packages arm64 debian non pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "aarch64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"
      
  - name: install PXC 8 deb packages amd64 non pro
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
      - percona-toolkit
    when: 
      - ansible_os_family == "Debian"
      - ansible_architecture == "x86_64"
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: remove Percona Xtradb Cluster deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: absent
    vars:
      packages:
      - percona-xtradb-cluster-server
    when: ansible_os_family == "Debian"

  - name: Block pmm.check-dev.percona.com IP for non REDHAT 
    iptables:
      chain: OUTPUT
      destination: check-dev.percona.com
      jump: DROP
    when: 
      - lookup('env', 'upgrade_repo') == ""  
      -  ansible_distribution != "Amazon" 

  - name: install PXC 8 deb packages with blocked Telemetry Server NON PRO
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full
    when:
      - ansible_os_family == "Debian" and lookup('env', 'upgrade_repo') == ""
      - lookup('env', 'pro') == "no"
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: install PXC 8 deb packages with blocked Telemetry Server
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster
    when: ansible_os_family == "Debian" and lookup('env', 'upgrade_repo') == ""
    environment:
      PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  - name: check telemetry file presence (unavailable)
    command: /package-testing/check_telemetry.sh pxc -u

  - name: get telemetry_uuid content
    command: cat /usr/local/percona/telemetry_uuid
    register: t_uuid_output

  - name: output telemetry_uuid content
    debug:
      var: t_uuid_output
