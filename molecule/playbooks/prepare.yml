---
- name: Prepare node for running tests
  hosts: all
  become: true
  become_method: sudo
  gather_facts: true
  tasks:
    - name: Edit mirrorlist for Centos8 repos
      shell: "sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-Linux-*"
      when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "8"

    - name: Edit baseurl for Centos8 repos
      shell: "sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-Linux-*"
      when: ansible_distribution == "CentOS" and ansible_distribution_major_version == "8"

    - name: install GPG key for epel 8
      rpm_key:
        state: present
        key: https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-8
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

    - name: install GPG key for Percona repos
      rpm_key:
        state: present
        key: "{{ item }}"
      with_items:
        - https://repo.percona.com/yum/RPM-GPG-KEY-Percona
        - https://repo.percona.com/yum/PERCONA-PACKAGING-KEY
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

    - name: setup epel 8 repo
      yum: name=https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm state=present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

    - name: setup ca-certificates release
      yum:
        name: ca-certificates
        update_cache: yes
        state: present
      when: ansible_os_family == "RedHat"

    - name: setup epel release centos 7
      yum:
        name: epel-release
        update_cache: yes
        state: present
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

    - name: allow release-info to change for apt repositories
      command: apt-get update -y --allow-releaseinfo-change
      when: ansible_os_family == "Debian" and ansible_distribution_release == "buster"

    - name: install needed packages for running tests with apt
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
          - unzip
          - wget
          - gnupg
          - gnupg2
          - rsync
          - acl
          - git
      retries: 60
      delay: 10
      register: result
      until: result is not failed
      when: ansible_os_family == "Debian"

    - name: update systemd-sysv integration on debian/ubuntu
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
        - systemd-sysv
      when: ansible_os_family == "Debian" and ansible_distribution_release != "trusty"

    - name: install needed packages for running tests with yum
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
          - pv
          - libselinux-python
          - unzip
          - wget
          - rsync
          - git
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int <= 7

    - name: install needed packages for running tests with yum on RHEL8
      yum:
        name: "{{ packages }}"
        state: latest
      vars:
        packages:
        - unzip
        - git
        - wget
      when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int == 8

    - name: Setup SSH keys CentOS
      authorized_key:
        user: centos
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: (ansible_distribution == "CentOS") and (lookup('env', 'DESTROY_ENV') == "no")

    - name: Setup SSH keys Oracle Linux
      authorized_key:
        user: ec2-user
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: (ansible_distribution == "OracleLinux") and (lookup('env', 'DESTROY_ENV') == "no")

    - name: Setup SSH keys Debian
      authorized_key:
        user: admin
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: (ansible_distribution == "Debian") and (lookup('env', 'DESTROY_ENV') == "no")

    - name: Setup SSH keys Ubuntu
      authorized_key:
        user: ubuntu
        key: "{{ lookup('file', 'public_keys') }}"
        state: present
        exclusive: False
      when: (ansible_distribution == "Ubuntu") and (lookup('env', 'DESTROY_ENV') == "no")
