---
  - name: Ensure 'tar' is installed
    ansible.builtin.package:
      name: tar
      state: present

  - name: Ensure 'gtar' symlink exists (some distros require it)
    ansible.builtin.file:
      src: /usr/bin/tar
      dest: /usr/bin/gtar
      state: link
    when: ansible_facts['os_family'] == "RedHat"

  - name: Get OS ID
    command: awk -F= '/^ID=/{print $2}' /etc/os-release
    register: os_id_raw

  - name: Get OS VERSION_CODENAME or VERSION_ID
    shell: |
      source /etc/os-release
      echo "${VERSION_CODENAME:-$VERSION_ID}"
    args:
      executable: /bin/bash
    register: os_codename_raw

  - name: Normalize os_version key
    set_fact:
      os_version: "{{ os_id_raw.stdout | regex_replace('\"', '') }}:{{ os_codename_raw.stdout | regex_replace('\"', '') }}"

#  - name: Remove the decimal value from the os_version
#    shell: |
#      echo "{{ os_version_full }}" | grep -oE '\b\w+:[0-9]+'
#    register: os_version

  - name: Set glibc version based on os_version
    set_fact:
      glibc_version: "{{ glibc_versions_map.get(os_version, 'Unknown OS version') }}"

  - name: Show detected values
    debug:
      msg: "Detected OS: {{ os_version }}, glibc version: {{ glibc_version }}"

  - name: SET PXB_VERSION VAR
    set_fact:
      PXB_VERSION: "{{ lookup('env', 'PXB_VERSION') }}"

  - name: Set Tarball and Folder name for REGULAR
    set_fact:
      TARBALL_NAME_REGULAR: "percona-xtrabackup-{{ lookup('env', 'PXB_VERSION') }}-Linux-x86_64.glibc{{ glibc_version }}.tar.gz"
      TARBALL_NAME_REGULAR_FOLDER: "percona-xtrabackup-{{ lookup('env', 'PXB_VERSION') }}-Linux-x86_64.glibc{{ glibc_version }}"

  - name: Set Tarball and Folder name for MINIMAL
    set_fact:
      TARBALL_NAME_MINIMAL: "percona-xtrabackup-{{ lookup('env', 'PXB_VERSION') }}-Linux-x86_64.glibc{{ glibc_version }}-minimal.tar.gz"
      TARBALL_NAME_MINIMAL_FOLDER: "percona-xtrabackup-{{ lookup('env', 'PXB_VERSION') }}-Linux-x86_64.glibc{{ glibc_version }}-minimal"

  - name: Extract major version
    set_fact:
      major_version: "{{ PXB_VERSION.split('-')[0] }}"

  - name: Extract minor version
    set_fact:
      minor_version: "{{ PXB_VERSION.split('-')[1] }}"

  - name: Print major and minor versions
    debug:
      msg: "Major version: {{ major_version }}, Minor version: {{ minor_version }}"

  - name: include tasks for test env setup
    include_tasks: ../../../tasks/test_prep.yml

  - name: install libev rpm package
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - libev
    when: ansible_os_family == "RedHat"

  - name: Enable Percona Server 8.0 main repository
    include_tasks: ../../../tasks/enable_ps8_main_repo.yml

  - name: include playbook for Install Percona Server 8.0
    include_tasks: ../../../tasks/install_ps80.yml

  - name: clean and update yum cache
    shell: |
      yum clean all
      yum makecache
    when: ansible_os_family == "RedHat"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: install Percona Server 8.0 packages
    include_tasks: ../../../tasks/install_ps80.yml

  - name: Download {{ TARBALL_NAME_REGULAR }} REGULAR
    ansible.builtin.get_url:
      url: https://downloads.percona.com/downloads/TESTING/pxb-{{ PXB_VERSION }}/{{ TARBALL_NAME_REGULAR }}
      dest: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR }}
      mode: '0644'

  - name: Extract {{ TARBALL_NAME_REGULAR }} REGULAR
    ansible.builtin.unarchive:
      src: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR }}
      dest: /package-testing/molecule/pxb-rhel-binary-tarball/
      remote_src: yes

  - name: start mysql service with systemctl command
    command: systemctl start mysql

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: install plugins, import world database
    command: /package-testing/plugins_test.sh


# RHEL
  - name: run backup for Redhat/Centos
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/ --socket=/var/lib/mysql/mysql.sock
    when: ansible_os_family == "RedHat"

  - name: run backup for Debian
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/
    when: ansible_os_family == "Debian"

  - name: prepare backup
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xtrabackup --prepare --target-dir=/tmp/backups/

  - name: run backup for Redhat/Centos with streaming and encryption enabled
    shell: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=backups/ --socket=/var/lib/mysql/mysql.sock --encrypt=AES256 --encrypt-key=mAU3Xs5sRcSB7zBEJP1BInPP5lgShKly --stream=xbstream --parallel=10 > backup.stream
    when: ansible_os_family == "RedHat"

  - name: run backup for Debian with streaming and encryption enabled
    shell: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=backups/ --encrypt=AES256 --encrypt-key=mAU3Xs5sRcSB7zBEJP1BInPP5lgShKly --stream=xbstream --parallel=10 > backup.stream
    when: ansible_os_family == "Debian"

  - name: extract and decrypt backup
    shell: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xbstream --directory=backups/ --extract --decrypt=AES256 --encrypt-key=mAU3Xs5sRcSB7zBEJP1BInPP5lgShKly < backup.stream

  - name: prepare backup
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }}/bin/xtrabackup --prepare --target-dir=backups/

  - name: remove backup files
    command: rm -r /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_REGULAR_FOLDER }} backups /tmp/backups

  - name: Download {{ TARBALL_NAME_MINIMAL }} MINIMAL
    ansible.builtin.get_url:
      url: https://downloads.percona.com/downloads/TESTING/pxb-{{ PXB_VERSION }}/{{ TARBALL_NAME_MINIMAL }}
      dest: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL }}
      mode: '0644'

  - name: Extract {{ TARBALL_NAME_MINIMAL }} MINIMAL
    ansible.builtin.unarchive:
      src: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL }}
      dest: /package-testing/molecule/pxb-rhel-binary-tarball/
      remote_src: yes

  - name: run backup for Redhat/Centos minimal
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/ --socket=/var/lib/mysql/mysql.sock
    when: ansible_os_family == "RedHat"

  - name: run backup for Debian minimal
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xtrabackup  --backup --user=root --target-dir=/tmp/backups/
    when: ansible_os_family == "Debian"

  - name: prepare backup
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xtrabackup --prepare --target-dir=/tmp/backups/

  - name: run backup for Redhat/Centos with streaming and encryption enabled
    shell: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=backups/ --socket=/var/lib/mysql/mysql.sock --encrypt=AES256 --encrypt-key=mAU3Xs5sRcSB7zBEJP1BInPP5lgShKly --stream=xbstream --parallel=10 > backup.stream
    when: ansible_os_family == "RedHat"

  - name: run backup for Debian with streaming and encryption enabled
    shell: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xtrabackup --backup --user=root --target-dir=backups/ --encrypt=AES256 --encrypt-key=mAU3Xs5sRcSB7zBEJP1BInPP5lgShKly --stream=xbstream --parallel=10 > backup.stream
    when: ansible_os_family == "Debian"

  - name: extract and decrypt backup
    shell: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xbstream --directory=backups/ --extract --decrypt=AES256 --encrypt-key=mAU3Xs5sRcSB7zBEJP1BInPP5lgShKly < backup.stream

  - name: prepare backup
    command: /package-testing/molecule/pxb-rhel-binary-tarball/{{ TARBALL_NAME_MINIMAL_FOLDER }}/bin/xtrabackup --prepare --target-dir=backups/


