---
# This playbook does the following:
#   enables Percona testing repository
#   installs latest version of PS 8.4, PyKmip and runs some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    gnupg_home: /root/.gnupg
    percona_key1: 4D1BB29D63D98E422B2113B19334A25F8507EFA5
    percona_key1_file: "{{ gnupg_home }}/PERCONA-PACKAGING-KEY"
  environment:
    PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: disable selinux
    selinux: state=disabled
    when: ansible_os_family == "RedHat"

  - name: include tasks for enabling PS 84 test repo
    include_tasks: ../tasks/enable_ps84_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS 84 test repo
    include_tasks: ../tasks/enable_ps84_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling PS 84 experimental repo
    include_tasks: ../tasks/enable_ps84_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: install Percona Server 8.4 packages
    include_tasks: ../tasks/install_ps84.yml

  - name: list installed packages
    include_tasks: ../tasks/list_installed_packages.yml

  - name: stop mysql service
    service: name=mysql state=stopped

  - name: remove mysql data directory
    command: rm -r /var/lib/mysql

  - name: install python3-pip on RedHat/CentOS
    yum:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when:
      - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
      - ansible_facts['distribution_major_version'] | int <= 7

  - name: install python3-pip on RedHat/CentOS dnf
    dnf:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when:
      - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
      - ansible_facts['distribution_major_version'] | int >= 8

  - name: install python3-pip on Debian/Ubuntu
    apt:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: install pykmip
    command: "{{ item }}"
    with_items:
        - python3 -m pip install --upgrade importlib-metadata
        - python3 -m pip install -U pip
        - python3 -m pip install -U setuptools
        - python3 -m pip install urllib3==1.26.6
        - python3 -m pip install -U pykmip
    when:
        - ansible_distribution_release != "bookworm"
        - ansible_distribution_release != "noble"

#  - name: install pykmip
#    command: "{{ item }}"
#    with_items:
#        - python3 -m pip install -U --break-system-packages pip
#        - python3 -m pip install -U --break-system-packages setuptools
#        - python3 -m pip install -U --break-system-packages pykmip
#    when: ansible_distribution_release in ["bookworm", "noble"]

  - name: Ensure ~/.local/bin is in PATH for current user
    lineinfile:
      path: /home/{{ ansible_user }}/.bashrc
      line: 'export PATH=$HOME/.local/bin:$PATH'
      insertafter: EOF
    when:
      - ansible_distribution_release in ['bookworm', 'noble']

  - name: install pykmip on bookworm/noble using user site
    pip:
      name:
        - setuptools
        - pykmip
      extra_args: --user
      executable: pip3
    environment:
      PYTHONUSERBASE: "/home/{{ ansible_user }}/.local"
    when:
      - ansible_distribution_release in ['bookworm', 'noble']

  - name: downgrade SQLAlchemy as new version doesn't work with pykmip
    command: pip3 install SQLAlchemy==1.4.46
    when:
        - ansible_distribution_release != "bookworm"
        - ansible_distribution_release != "noble"

  - name: downgrade SQLAlchemy as new version doesn't work with pykmip
    command: pip3 install --break-system-packages SQLAlchemy==1.4.46
    when: ansible_distribution_release in ["bookworm", "noble"]

  - name: Check PyKMIP is importable
    command: python3 -c "import pykmip; print(pykmip.__version__)"
    register: pykmip_check
    failed_when: "'No module named' in pykmip_check.stderr"
    when:
      - ansible_distribution_release in ['bookworm', 'noble']

  - name: start pykmip server
    shell: nohup /usr/local/bin/pykmip-server -f /package-testing/kmip/server.conf -l /pykmip_server.log 2>&1 &
    when:
        - ansible_distribution_release != "bookworm"
        - ansible_distribution_release != "noble"

  - name: start pykmip server
    shell: nohup ~/.local/bin/pykmip-server -f /package-testing/kmip/server.conf -l /pykmip_server.log 2>&1 &
    when: ansible_distribution_release in ["bookworm", "noble"]

  - name: Check if kmip-server is running
    shell: ps -ef | grep kmip-server | grep -v grep

  - name: copy the global manifest for mysql
    copy:
        src: /package-testing/kmip/mysqld.my
        dest: /usr/sbin/
        remote_src: yes

  - name: copy the global configuration file for mysql in Redhat/CentOS
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib64/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: copy the global configuration file for mysql in Debian/Ubuntu
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "Debian"

#  - name: copy the encryption config file on Debian/Ubuntu
#    copy:
#        src: /package-testing/kmip/encryption.j2
#        dest: /etc/mysql/conf.d/encryption.cnf
#        remote_src: yes
#    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

#  - name: copy the encryption config file on RHEL/CentOS/Amazon
#    copy:
#        src: /package-testing/kmip/encryption.j2
#        dest: /etc/my.cnf.d/encryption.cnf
#        remote_src: yes
#    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service: name=mysql state=started

  - name: check mysql service status
    command: /package-testing/check_running.sh mysql running

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: check that Percona Server package versions are correct
    command: /package-testing/package_check.sh ps84

  - name: import world database
    command: /package-testing/plugins_test.sh
