---
# This playbook sets up the first PXC node from Percona main repo

- hosts: all
  become: true
  become_method: sudo

  tasks:
  # find vm ip so that it can be used in templates
  - debug: var=ansible_all_ipv4_addresses
  - set_fact:
      man_ip: "{{ item }}"
    with_items: "{{ ansible_all_ipv4_addresses }}"
    when: "item.startswith('192.168')"
  - debug: var=man_ip

  - name: include tasks for test env setup
    include: ../tasks/test_prep.yml

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: include tasks for enabling test repo
    include_tasks: ../tasks/enable_pxc57_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing"

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_pxc57_main_repo.yml
    when: lookup('env', 'install_repo') == "main" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_pxc57_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: disable selinux
    selinux: state=disabled
    when: ansible_os_family == "RedHat"

  - name: add firewall rules
    command: /sbin/iptables -I INPUT -s {{item}} -p tcp -j ACCEPT
    with_items:
    - 192.168.70.63
    - 192.168.70.62
    - 192.168.70.61
    when: ansible_os_family == "RedHat"

  - name: install PXC 5.7 previous deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - percona-xtradb-cluster-full-57
      - percona-xtradb-cluster-57
    when: ansible_os_family == "Debian"

  - name: install python mysql deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - python-mysqldb
    when: ansible_os_family == "Debian" and ansible_distribution_release != "focal"

  - name: install python mysql deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - python3-mysqldb
    when: ansible_os_family == "Debian" and ansible_distribution_release == "focal"

  - name: install PXC 5.7 previous rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - Percona-XtraDB-Cluster-full-57
      - Percona-XtraDB-Cluster-57
    when: ansible_os_family == "RedHat" 

  - name: install python mysql rpm packages for CentOS 6 and 7
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - MySQL-python
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version != "8"

  - name: install python mysql rpm packages for CentOS 8
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - python3-PyMySQL
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: stop mysql service with service command
    command: service mysql stop

  - name: copy pxc config on centos 6
    template: src=../templates/my_rpm.j2 dest=/etc/my.cnf
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: copy pxc config on centos 7
    template: src=../templates/my_rpm_7.j2 dest=/etc/my.cnf
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: configure PXC on debian/ubuntu
    template: src=../templates/my.j2
              dest=/etc/mysql/my.cnf
              mode=0640 owner=mysql group=root
    when: ansible_os_family == "Debian"

  # bootstrap the cluster
  - name: bootstrap cluster on RHEL6
    command: /etc/init.d/mysql bootstrap-pxc
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: bootstrap cluster on RHEL7
    command: systemctl start mysql@bootstrap.service
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: run the bootstrap service on debian/ubuntu
    command: service mysql bootstrap-pxc
    when: ansible_os_family == "Debian"

  # set root password on centos
  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  # add sstuser
  - name: create backup user on centos 6
    mysql_user: name=sstuser password=s3cretPass priv="*.*:RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT" state=present
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: create backup user on centos 7
    command: /package-testing/pxc_backup_user.sh
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: create backup user on debian/ubuntu
    mysql_user: name=sstuser password=s3cretPass priv="*.*:RELOAD,PROCESS,LOCK TABLES,REPLICATION CLIENT" state=present
    when: ansible_os_family == "Debian"

  # other tests
  - name: install plugins
    command: /package-testing/plugins_test_57.sh pxc

  - name: register PXC version
    shell: mysqld --version
    register: pxc_version
    when: lookup('env', 'check_version') != "yes" and lookup('env', 'check_version') != ""

  - name: print PXC version
    debug: var=pxc_version
    when: lookup('env', 'check_version') != "yes" and lookup('env', 'check_version') != ""

  - name: check PXC 5.7 version
    command: /package-testing/version_check.sh pxc57
    when: lookup('env', 'check_version') == "yes" or lookup('env', 'check_version') == ""

