---
# This playbook does following:
#   enables Percona testing repository
#   installs latest version of PMM2 client
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"

  tasks:
  - name: Install JQ for exporter end point metric fetch
    yum:
      name: "{{ packages }}"
      state: latest
      update_cache: yes
    vars:
      packages:
      - jq
    when: ansible_os_family == "RedHat"
  
  - name: Install JQ for exporter end point metric fetch
    apt:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - jq
    when: ansible_os_family == "Debian"

  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling test repo
    include_tasks: ../tasks/enable_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: install PMM client new deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: install acl package
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - acl
    when: ansible_os_family == "Debian"

  - name: install PMM client new rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: setup pmm2-client artifacts for custom path
    command: "{{item}}"
    with_items:
      - "chmod +x /package-testing/scripts/pmm2_client_custom_path.sh"
      - "/package-testing/scripts/pmm2_client_custom_path.sh"

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2
    when: lookup('env', 'install_repo') == "experimental" or lookup('env', 'install_repo') == ""

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2-rc
    when: lookup('env', 'install_repo') == "testing"

  - name: configure pmm client to connect to server in push/auto Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=auto --paths-base=/pmm2-client-custom-path/ --server-url=http://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "push" or lookup('env', 'metrics_mode') == ""

  - name: configure pmm client to connect to server in pull Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=pull --paths-base=/pmm2-client-custom-path/ --server-url=http://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "pull"

  - name: Check if the configuration generated with paths-base is using the custom path
    shell: cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c "/pmm2-client-custom-path" | grep "14"
    become: yes

### start PS5.7
  - name: install Percona Server 5.7 packages
    include_tasks: ../tasks/install_ps57.yml

  - name: start mysql service
    service: name=mysql state=started

  - name: start mysql service with service command
    command: service mysql start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mysql service with systemctl command
    command: systemctl start mysql
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: add mysql metrics and queries to monitoring
    command: /package-testing/scripts/pmm2_add_instance.sh mysql
    when: ansible_os_family == "RedHat"

  - name: add mysql instance for monitoring
    command: pmm-admin add mysql --query-source=perfschema --socket=/var/run/mysqld/mysqld.sock --service-name=mysql_{{ instance_ip }}
    when: ansible_os_family != "RedHat"

  - name: check if mysql monitoring running
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: Wait for mysqld_exporter to have Running Status.
    shell: pmm-admin list | grep 'mysqld_exporter' | awk -F" " '{print $2}'
    register: mysqld_exporter_status
    until: mysqld_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains mysqld_exporter with Running state
    assert:
      that:
        - "'Running' in mysqld_exporter_status.stdout"

  - name: Wait for mysql_perfschema_agent to have Running Status.
    shell: pmm-admin list | grep 'mysql_perfschema_agent' | awk -F" " '{print $2}'
    register: mysql_perfschema_agent_status
    until: mysql_perfschema_agent_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains mysql_perfschema_agent with Running state
    assert:
      that:
        - "'Running' in mysql_perfschema_agent_status.stdout"
## end PS

### start PSMDB4.4
  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_psmdb_repo.yml
    vars:
      psmdb_repo: "psmdb-44"

  - name: install PSMDB packages
    include_tasks: ../tasks/install_psmdb.yml

  - name: start mongod with service
    command: service mongod start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mongod with systemctl
    command: systemctl start mongod
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 6

  - name: add mongodb metrics to monitoring
    command: pmm-admin add mongodb --service-name=mongodb_{{ instance_ip }}

  - name: check if mongodb monitoring is running
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Wait for mongodb_exporter to have Running Status.
    shell: pmm-admin list | grep 'mongodb_exporter' | awk -F" " '{print $2}'
    register: mongodb_exporter_status
    until: mongodb_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains mongodb_exporter with Running state
    assert:
      that:
        - "'Running' in mongodb_exporter_status.stdout"
### end PSMDB

### start pgsql13

  - name: Enable postgresql repository
    command: percona-release setup -y ppg-13
    when: ansible_distribution_release != 'xenial'

  - name: include tasks for setting up pg13
    include_tasks: ../ppg-testing/tasks/install_ppg13.yml
    when: ansible_distribution_release != 'xenial'

  - name: Initialize Postgres RHEL
    command: /usr/pgsql-13/bin/postgresql-13-setup initdb
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_os_family == "RedHat"

  - name: Start Postgres RHEL
    service:
      name: postgresql-13
      state: started
      enabled: true
    when: ansible_os_family == "RedHat"

  - name: Start postgresql service for Debian based
    service:
      name: postgresql
      state: started
      enabled: true
    when: ansible_os_family == "Debian" and ansible_distribution_release != 'xenial'

  - name: create lowercase 8 character password for pgsql
    set_fact:
      random_pgsql_password: "psql-{{ lookup('password', '/tmp/pgsqlpassword chars=ascii_lowercase,digits length=8') }}"

  - name: Change Postgresql Password
    command: psql -c "ALTER USER postgres PASSWORD '{{ random_pgsql_password }}';"
    become: yes
    become_user: postgres
    when: ansible_distribution_release != 'xenial'

  - name: add postgresql metrics to monitoring
    command: pmm-admin add postgresql --password={{ random_pgsql_password }} --service-name=pgsql_{{ instance_ip }}
    when: ansible_distribution_release != 'xenial'

  - name: check if postgresql monitoring is running
    command: pmm-admin list
    register: list_output
    when: ansible_distribution_release != 'xenial'

  - name: Print the pmm-admin list value
    ansible.builtin.debug:
      msg: System {{ list_output.stdout }}
    when: ansible_distribution_release != 'xenial'

  - name: Assert if the pmm-admin list contains postgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"
    when: ansible_distribution_release != 'xenial'

  - name: Wait for postgres_exporter to have Running Status.
    shell: pmm-admin list | grep 'postgres_exporter' | awk -F" " '{print $2}'
    when: ansible_distribution_release != 'xenial'
    register: postgres_exporter_status
    until: postgres_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains postgres_exporter with Running state
    assert:
      that:
        - "'Running' in postgres_exporter_status.stdout"
    when: ansible_distribution_release != 'xenial'
## end PG

  - name: run pmm-admin list
    command: pmm-admin list

  - name: check if pmm_agent is connected
    shell: pmm-admin list | grep pmm_agent | awk -F" " '{print $2}'
    register: pmm_agent_status

  - name: Assert if the pmm-admin list contains pmm_agent type and Connected
    assert:
     that:
      - "'Connected' in pmm_agent_status.stdout"

  - name: Wait for node_exporter to be Running Status.
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: ne_status
    until: ne_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if node_exporter is Running
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: node_exporter_status

  - name: Print the node_exporter_status
    ansible.builtin.debug:
      msg: Node Exporter Status is {{ node_exporter_status.stdout }}

  - name: Assert if the pmm-admin list contains node_exporter and Running state
    assert:
     that:
      - "'Running' in node_exporter_status.stdout"

  - name: Wait for vmagent to be Running Status.
    shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
    register: vm_status
    until: vm_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if vmagent is Running
    shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
    register: vmagent_status

  - name: Print the vmagent Status
    ansible.builtin.debug:
      msg: vmagent status is {{ vmagent_status.stdout }}

  - name: Assert if the pmm-admin list contains vmagent and Running State
    assert:
     that:
      - "'Running' in vmagent_status.stdout"

  - name: Fetch PMM-Admin version via pmm-admin status output
    shell: pmm-admin status | grep pmm-admin | awk -F' ' '{print $3}'
    register: pmm_admin_version

  - name: Print the PMM-Admin Version on Status command
    ansible.builtin.debug:
      msg: pmm-admin version is {{ pmm_admin_version.stdout }}

  - name: Assert if the version output value is strict matched with expected version
    assert:
     that:
      - "'{{ pmm_version }}' in pmm_admin_version.stdout"
    when: lookup('env', 'install_repo') == "testing"

  - name: remove PMM client deb packages
    apt: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: remove PMM client rpm packages
    yum: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"
