---
# This playbook does following:
#   enables Percona testing repository
#   installs the latest version of PMM2 client
#   does some tests of custom port listening
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"
    custom_port: 17788
    port_flag: "--pmm-agent-listen-port={{ custom_port }}"
    cmd_admin_list: "pmm-admin list {{ port_flag }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: include tasks for test env setup
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### install PMM Client from tarball
  - name: setup pmm2-client artifacts for custom path
    command: "../scripts/pmm2_client_install_tarball.sh -l -v {{ pmm_version }}"

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

### Setup PMM Client
  - name: define "--metrics-mode=push|pull|auto" argument
    set_fact:
      metrics_mode_arg: "--metrics-mode={{ metrics_mode }}"

  - name: Use pmm-agent setup to configure pmm client to connect to server
    shell: pmm-agent setup --config-file=/usr/local/percona/pmm2/config/pmm-agent.yaml --force --server-address={{ pmm_server_address }} --server-insecure-tls --listen-port={{ custom_port }} {{ metrics_mode_arg }} --server-username=admin --server-password={{ pmm_server_password }} {{ instance_ip }} generic node2_{{ instance_ip }}

  - name: Check if the configuration generated with pmm-agent-listen-port is using the custom port
    shell: "cat /usr/local/percona/pmm2/config/pmm-agent.yaml | grep -o -c '{{ custom_port }}' | grep '1'"
    become: yes

  - name: Start agent on custom port non-default port
    shell: pmm-agent --config-file=/usr/local/percona/pmm2/config/pmm-agent.yaml > pmm-agent.log 2>&1 &

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### start PS5.7
  - name: install Percona Server 5.7 packages
    include_tasks: ../tasks/install_ps57.yml

  - name: start mysql service
    service: name=mysql state=started

  - name: start mysql service with service command
    command: service mysql start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mysql service with systemctl command
    command: systemctl start mysql
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: set root password on centos
    command: ../setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: add mysql metrics and queries to monitoring
    command: ../scripts/pmm2_add_instance.sh mysql {{ port_flag }}
    when: ansible_os_family == "RedHat"

  - name: add mysql instance for monitoring
    command: pmm-admin add mysql {{ port_flag }} --query-source=perfschema --socket=/var/run/mysqld/mysqld.sock --service-name=mysql_{{ instance_ip }}
    when: ansible_os_family != "RedHat"

  - name: check if mysql monitoring running
    command: "{{ cmd_admin_list }}"
    register: list_output

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: Wait for mysqld_exporter to have Running Status.
    shell: "{{ cmd_admin_list }} | grep 'mysqld_exporter' | awk -F' ' '{print $2}'"
    register: mysqld_exporter_status
    until: mysqld_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 10

  - name: Assert if the pmm-admin list contains mysqld_exporter with Running state
    assert:
      that:
        - "'Running' in mysqld_exporter_status.stdout"

  - name: Wait for mysql_perfschema_agent to have Running Status.
    shell: "{{ cmd_admin_list }} | grep 'mysql_perfschema_agent' | awk -F' ' '{print $2}'"
    register: mysql_perfschema_agent_status
    until: mysql_perfschema_agent_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains mysql_perfschema_agent with Running state
    assert:
      that:
        - "'Running' in mysql_perfschema_agent_status.stdout"
## end PS

### start PSMDB4.4
  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_psmdb_repo.yml
    vars:
      psmdb_repo: "psmdb-44"

  - name: install PSMDB packages
    include_tasks: ../tasks/install_psmdb.yml

  - name: start mongod with service
    command: service mongod start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mongod with systemctl
    command: systemctl start mongod
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 6

  - name: add mongodb metrics to monitoring
    command: pmm-admin add mongodb {{ port_flag }} --service-name=mongodb_{{ instance_ip }}

  - name: check if mongodb monitoring is running
    command: "{{ cmd_admin_list }}"
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Wait for mongodb_exporter to have Running Status.
    shell: "{{ cmd_admin_list }} | grep 'mongodb_exporter' | awk -F' ' '{print $2}'"
    register: mongodb_exporter_status
    until: mongodb_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains mongodb_exporter with Running state
    assert:
      that:
        - "'Running' in mongodb_exporter_status.stdout"
### end PSMDB

### start pgsql13
  - name: Enable postgresql repository
    command: percona-release setup -y ppg-13
    when: ansible_distribution_release != 'xenial'

  - name: include tasks for setting up pg13
    include_tasks: ../ppg-testing/tasks/install_ppg13.yml
    when: ansible_distribution_release != 'xenial'

  - name: Initialize Postgres RHEL
    command: /usr/pgsql-13/bin/postgresql-13-setup initdb
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_os_family == "RedHat"

  - name: Start Postgres RHEL
    service:
      name: postgresql-13
      state: started
      enabled: true
    when: ansible_os_family == "RedHat"

  - name: Start postgresql service for Debian based
    service:
      name: postgresql
      state: started
      enabled: true
    when: ansible_os_family == "Debian" and ansible_distribution_release != 'xenial'

  - name: create lowercase 8 character password for pgsql
    set_fact:
      random_pgsql_password: "psql-{{ lookup('password', '/tmp/pgsqlpassword chars=ascii_lowercase,digits length=8') }}"

  - name: Change Postgresql Password
    command: psql -c "ALTER USER postgres PASSWORD '{{ random_pgsql_password }}';"
    become: yes
    become_user: postgres

  - name: add postgresql metrics to monitoring
    command: pmm-admin add postgresql {{ port_flag }} --password={{ random_pgsql_password }} --service-name=pgsql_{{ instance_ip }}

  - name: check if postgresql monitoring is running
    command: "{{ cmd_admin_list }}"
    register: list_output

  - name: Print the pmm-admin list value
    ansible.builtin.debug:
      msg: System {{ list_output.stdout }}

  - name: Assert if the pmm-admin list contains postgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"

  - name: Wait for postgres_exporter to have Running Status.
    shell: "{{ cmd_admin_list }} | grep 'postgres_exporter' | awk -F' ' '{print $2}'"
    register: postgres_exporter_status
    until: postgres_exporter_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: Assert if the pmm-admin list contains postgres_exporter with Running state
    assert:
      that:
        - "'Running' in postgres_exporter_status.stdout"
## end PG

### Secondary checks
  - name: Wait for node_exporter to be Running Status.
    shell: "{{ cmd_admin_list }}| grep node_exporter | awk -F' ' '{print $2}'"
    register: ne_status
    until: ne_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if node_exporter is Running
    shell: "{{ cmd_admin_list }}| grep node_exporter | awk -F' ' '{print $2}'"
    register: node_exporter_status

  - name: Print the node_exporter_status
    ansible.builtin.debug:
      msg: Node Exporter Status is {{ node_exporter_status.stdout }}

  - name: Assert if the pmm-admin list contains node_exporter and Running state
    assert:
     that:
      - "'Running' in node_exporter_status.stdout"

  - name: Wait for vmagent to be Running Status.
    shell: "{{ cmd_admin_list }}| grep vmagent | awk -F' ' '{print $2}'"
    register: vm_status
    until: vm_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if vmagent is Running
    shell: "{{ cmd_admin_list }}| grep vmagent | awk -F' ' '{print $2}'"
    register: vmagent_status

  - name: Print the vmagent Status
    ansible.builtin.debug:
      msg: vmagent status is {{ vmagent_status.stdout }}

  - name: Assert if the pmm-admin list contains vmagent and Running State
    assert:
     that:
      - "'Running' in vmagent_status.stdout"
