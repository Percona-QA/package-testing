---
# This playbook does following:
#   enables Percona testing repository
#   installs latest version of proxysql
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
      client: "{{ lookup('env', 'client_to_test') }}"

  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

#
# Install from main repository
#

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml

  - name: install proxysql new deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - proxysql2
    when: ansible_os_family == "Debian"

  - name: install proxysql new rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
    vars:
      packages:
      - proxysql2
    when: ansible_os_family == "RedHat"

  - name: start proxysql service
    service: name=proxysql state=started

  - name: stop proxysql service
    service: name=proxysql state=stopped

  - name: start proxysql service
    service: name=proxysql state=started

#
# Enable testing repository
#
  - include_tasks: ../tasks/enable_testing_repo.yml

#
# Upgrade packages
#

  - name: upgrade ProxySQL to new deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: latest
    vars:
      packages:
      - proxysql2
    when: ansible_os_family == "Debian"

  - name: upgrade ProxySQL to new rpm packages
    yum:
      name: "{{ packages }}"
      state: latest
      enablerepo: percona-testing-x86_64
    vars:
      packages:
      - proxysql2
    when: ansible_os_family == "RedHat"

  - name: check if service is running after upgrade
    command: /package-testing/scripts/proxy_check.sh

  - name: run client_check tasks
    include_tasks: ../tasks/client_check.yml

  - name: check that proxysql version is correct
    command: /package-testing/version_check.sh proxysql2

  - name: remove proxysql deb packages
    apt:
      name: "{{ packages }}"
      state: absent
    vars:
      packages:
      - proxysql2
    when: ansible_os_family == "Debian"

  - name: remove proxysql rpm packages
    yum:
      name: "{{ packages }}"
      state: absent
    vars:
      packages:
      - proxysql2
    when: ansible_os_family == "RedHat"

  - name: check if process is stopped after package removal
    command: /package-testing/check_running.sh proxysql stopped
