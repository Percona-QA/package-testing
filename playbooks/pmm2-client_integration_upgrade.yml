---
# This playbook does following:
#   enables Percona main repository
#   installs previous version of PMM client
#   enables Percona testing repository
#   upgrades PMM client
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"

  tasks:
  - name: Install Needed Packages, update repo for redhat
    shell: "{{item}}"
    with_items:
      - "yum install epel-release -y"
      - "yum update -y"
    when: ansible_os_family == "RedHat"
    become: true

  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml

### enable pmm2-client release and install old version to update
  - name: enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: detect and save release minor version
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-server/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1 | awk -F. '{print $2}'"
    register: pmm_release_minor_version
    when: test_repo == "main"

  - name: grep previous release PMM Client version from yum list
    shell: "yum list pmm2-client --showduplicates | grep 2.{{ pmm_release_minor_version.stdout | int -1 | tail -n1}}"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "RedHat"

  - name: grep previous release PMM Client version from apt list
    shell: "apt-cache madison pmm2-client | grep 2.{{ pmm_release_minor_version.stdout | int -1 }} | awk '{print $3}'"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: set PMM Client package name with old version to install
    set_fact:
      pmm_client_old: "pmm2-client={{ pmm_old_version.stdout }}"
    when: test_repo == "main"

  - name: set PMM Client package name to install
    set_fact:
      pmm_client_old: "pmm2-client"
    when: test_repo != "main"

  - name: print old version
    ansible.builtin.debug:
      msg: "Installing old version: '{{ pmm_client_old }}'"

  - name: install PMM client old deb packages
    apt: name={{ pmm_client_old }} update_cache=yes state=present
    when: ansible_os_family == "Debian"

  - name: install PMM client old rpm packages
    yum: name={{ pmm_client_old }} state=present
    when: ansible_os_family == "RedHat"

### Setup PMM Client
  - name: configure pmm client to connect to server in push/auto Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=auto --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "push" or lookup('env', 'metrics_mode') == ""

  - name: configure pmm client to connect to server in pull Mode
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=pull --server-url=https://admin:admin@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}
    when: lookup('env', 'metrics_mode') == "pull"

  - name: Grep pmm-admin status output
    shell: "pmm-admin status"
    register: pmm_admin_status
  - debug: var=pmm_admin_status.stdout

  - name: Assert pmm-agent is connected to server
    assert:
      that:
        - "'Failed to get PMM Agent status from local pmm-agent' not in pmm_admin_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

### start PS5.7
  - name: install Percona Server 5.7 packages
    include_tasks: ../tasks/install_ps57.yml

  - name: start mysql service
    service: name=mysql state=started

  - name: start mysql service with service command
    command: service mysql start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mysql service with systemctl command
    command: systemctl start mysql
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: set root password on centos
    command: ../setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: add mysql metrics and queries to monitoring
    command: ../scripts/pmm2_add_instance.sh mysql
    when: ansible_os_family == "RedHat"

  - name: add mysql instance for monitoring
    command: pmm-admin add mysql --query-source=perfschema --socket=/var/run/mysqld/mysqld.sock --service-name=mysql_{{ instance_ip }}
    when: ansible_os_family != "RedHat"

  - name: check if mysql monitoring running
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'MySQL' in list_output.stdout"
## end PS

### start PSMDB4.4
  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_psmdb_repo.yml
    vars:
      psmdb_repo: "psmdb-44"

  - name: install PSMDB packages
    include_tasks: ../tasks/install_psmdb.yml

  - name: start mongod with service
    command: service mongod start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mongod with systemctl
    command: systemctl start mongod
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version|int > 6

  - name: add mongodb metrics to monitoring
    command: pmm-admin add mongodb --service-name=mongodb_{{ instance_ip }}

  - name: add mongodb metrics to monitoring using socket
    command: pmm-admin add mongodb --socket=/tmp/mongodb-27017.sock --service-name=mongodb_socket_{{ instance_ip }}

  - name: check if mongodb monitoring is running
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"
### end PSMDB

### start pgsql13

  - name: Enable postgresql repository
    command: percona-release setup -y ppg-13
    when: ansible_distribution_release != 'xenial'

  - name: include tasks for setting up pg13
    include_tasks: ../ppg-testing/tasks/install_ppg13.yml
    when: ansible_distribution_release != 'xenial'

  - name: Initialize Postgres RHEL
    command: /usr/pgsql-13/bin/postgresql-13-setup initdb
    environment:
      PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
    when: ansible_os_family == "RedHat"

  - name: Start Postgres RHEL
    service:
      name: postgresql-13
      state: started
      enabled: true
    when: ansible_os_family == "RedHat"

  - name: Start postgresql service for Debian based
    service:
      name: postgresql
      state: started
      enabled: true
    when: ansible_os_family == "Debian" and ansible_distribution_release != 'xenial'

  - name: create lowercase 8 character password for pgsql
    set_fact:
      random_pgsql_password: "psql-{{ lookup('password', '/tmp/pgsqlpassword chars=ascii_lowercase,digits length=8') }}"

  - name: Change Postgresql Password
    command: psql -c "ALTER USER postgres PASSWORD '{{ random_pgsql_password }}';"
    become: yes
    become_user: postgres
    when: ansible_distribution_release != 'xenial'

  - name: setup postgresql pg_stat_statements for Debian based Systems
    shell: "{{item}}"
    with_items:
      - chmod a+w /etc/postgresql/13/main/postgresql.conf
      - echo "shared_preload_libraries = 'pg_stat_statements'" >> /etc/postgresql/13/main/postgresql.conf
      - cat /etc/postgresql/13/main/postgresql.conf | grep "pg_stat_statements"
    become: yes
    when: ansible_os_family == "Debian"

  - name: setup postgresql pg_stat_statements for redhat based systems
    shell: "{{item}}"
    with_items:
      - chmod a+w /var/lib/pgsql/13/data/postgresql.conf
      - echo "shared_preload_libraries = 'pg_stat_statements'" >> /var/lib/pgsql/13/data/postgresql.conf
      - cat /var/lib/pgsql/13/data/postgresql.conf | grep "pg_stat_statements"
    become: yes
    when: ansible_os_family == "RedHat"

  - name: Enable Socket Based Connection for pgsql via pgsql configuration for debian based systems
    command: sed -i 's/local   all             postgres                                peer/local   all             postgres                                trust/' /etc/postgresql/13/main/pg_hba.conf
    become: yes
    when: ansible_os_family == "Debian"

  - name: Enable Socket Based Connection for pgsql via pgsql configuration for redhat based systems
    command: sed -i 's/local   all             all                                     peer/local   all             all                                     trust/' /var/lib/pgsql/13/data/pg_hba.conf
    become: yes
    when: ansible_os_family == "RedHat"

  - name: Start Postgres RHEL
    service:
      name: postgresql-13
      state: restarted
      enabled: true
    when: ansible_os_family == "RedHat"

  - name: Start postgresql service for Debian based
    service:
      name: postgresql
      state: restarted
      enabled: true
    when: ansible_os_family == "Debian" and ansible_distribution_release != 'xenial'

  - name: Create Extension pg_stat_statements
    command: psql -c "create extension pg_stat_statements;"
    become: yes
    become_user: postgres

  - name: add postgresql metrics to monitoring
    command: pmm-admin add postgresql --password={{ random_pgsql_password }} --service-name=pgsql_{{ instance_ip }} --query-source="pgstatements"
    when: ansible_distribution_release != 'xenial'

  - name: add postgresql metrics to monitoring via socket
    command: pmm-admin add postgresql --socket /var/run/postgresql/ --username=postgres --service-name=pgsql_socket_{{ instance_ip }} --query-source="pgstatements"

  - name: check if postgresql monitoring is running
    command: pmm-admin list
    register: list_output
    when: ansible_distribution_release != 'xenial'

  - name: Print the pmm-admin list value
    ansible.builtin.debug:
      msg: System {{ list_output.stdout }}
    when: ansible_distribution_release != 'xenial'

  - name: Assert if the pmm-admin list contains postgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"
    when: ansible_distribution_release != 'xenial'

## end PG

### Upgrade PMM Client
  - name: include tasks for enabling testing repo
    include: ../tasks/enable_testing_repo.yml
    when: test_repo == "testing" or test_repo == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: test_repo == "experimental"

  - name: enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: upgrade PMM client to the latest deb packages
    apt: name=pmm2-client update_cache=yes state=latest
    when: ansible_os_family == "Debian"

  - name: upgrade PMM client to the latest rpm packages
    yum: name=pmm2-client state=latest
    when: ansible_os_family == "RedHat"

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

### Checks after upgrade
  - name: grep pmm_agent status from pmm-admin list
    shell: pmm-admin list | grep pmm_agent | awk -F" " '{print $2}'
    register: pmm_agent_status

  - name: verify pmm-admin list contains pmm_agent with Connected status
    assert:
      that:
        - "'Connected' in pmm_agent_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

  - name: check if mongodb is still being monitored
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: Assert if the pmm-admin list contains postgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_release != 'xenial'

  - name: Wait for node_exporter to be Running Status After Upgrade
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: ne_status
    until: ne_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if node_exporter is Running
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: node_exporter_status

  - name: Print the node_exporter_status
    ansible.builtin.debug:
      msg: Node Exporter Status is {{ node_exporter_status.stdout }}

  - name: Assert if the pmm-admin list contains node_exporter and Running state
    assert:
     that:
      - "'Running' in node_exporter_status.stdout"

  - name: Wait for vmagent to be Running Status After Upgrade
    shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
    register: vm_status
    until: vm_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if vmagent is Running
    shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
    register: vmagent_status

  - name: Print the vmagent Status
    ansible.builtin.debug:
      msg: vmagent status is {{ vmagent_status.stdout }}

  - name: Assert if the pmm-admin list contains vmagent and Running State
    assert:
     that:
      - "'Running' in vmagent_status.stdout"

  - name: check if Metric End point with Auth works for Node Exporter, MysqlD Exporter, MongoDB Exporter, Postgres Exporter
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --metric_name node_textfile_scrape_error --pmm_server_ip {{pmm_server_address}} --agent_type node_exporter --metric_value 0
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1

  - name: check if Metric End point with Auth works after upgrade for Postgres exporter when service was added via socket before upgrade
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1

  - name: check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: check if postgresql_pgstatements_agent is Running
    shell: pmm-admin list | grep postgresql_pgstatements_agent | awk -F" " '{print $2}'
    register: postgresql_pgstatements_agent

  - name: Print the postgresql_pgstatements_agent Status
    ansible.builtin.debug:
      msg: postgresql_pgstatements_agent status is {{ postgresql_pgstatements_agent.stdout }}

  - name: Assert if the pmm-admin list contains postgresql_pgstatements_agent and Running State
    assert:
     that:
      - "'Running' in postgresql_pgstatements_agent.stdout"

  - name: Remove Socket services, to verify Port output in pmm-admin list commands
    command: "{{item}}"
    with_items:
      - pmm-admin remove mongodb mongodb_socket_{{ instance_ip }}
      - pmm-admin remove postgresql pgsql_socket_{{ instance_ip }}

  - name: checking existence of all artifacts from pmm2-client
    command: bash -xe ../scripts/check_artifacts.sh

  - name: parse and set PMM minor version
    shell: "pmm-admin --version | grep ^Version | awk -F. '{print $2}'"
    register: pmm_agent_minor_version

  - name: include Exporters Port in output checks for 2.29.0+
    include_tasks: ../tasks/exporter-port-output-checks.yml
    when: pmm_agent_minor_version.stdout | int >= 29
    with_items:
      - vmagent
      - node_exporter
      - postgres_exporter
      - mongodb_exporter
      - mysqld_exporter

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### Clean up
  - name: remove PMM client deb packages
    apt: name=pmm2-client state=absent
    when: ansible_os_family == "Debian"

  - name: remove PMM client rpm packages
    yum: name=pmm2-client state=absent
    when: ansible_os_family == "RedHat"
