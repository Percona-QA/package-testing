---
# Advanced package upgrade test:
#   prepare Percona Repository and software
#   install PMM old client deb/rpm
#   perform correct setup
#   setup PS 5.7
#   setup PSMDB 4.4
#   setup PGSQL 13
#   install PMM the latest client deb/rpm
#   verify versions, exporters still work, metrics, etc.
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Set Integrations list
    set_fact:
      enabled_db: "{{ db_list|select|list }}"
    vars:
      db_list:
        - "{{ (false) | ternary('ps-8.0','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '9') | ternary('ps-5.7','') }}"
        - "{{ (ansible_os_family == 'Debian') | ternary('ps-5.7','') }}"
        - psmdb-6.0
        - "{{ (ansible_os_family == 'Debian') | ternary('pg-13','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '8') | ternary('pg-13','') }}"

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

  - name: Setup environment
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### enable pmm2-client release and install old version to update
  - name: enable pmm2-client release repo
    include_tasks: ../tasks/enable_repo.yml
    vars:
      only: yes
      package: "pmm2-client"
      repository: "release"

  - name: Detect and save release minor version
    when: test_repo == "main"
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-client/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1 | awk -F. '{print $2}'"
    register: pmm_release_minor_version

  - name: Grep previous release PMM Client version from yum list
    when: test_repo == "main" and ansible_os_family == "RedHat"
    shell: "yum list pmm2-client --showduplicates | grep 2.{{ pmm_release_minor_version.stdout | int -1 }} | tail -n1 | awk '{print $2}'"
    register: pmm_old_version_rpm

  - name: Grep previous release PMM Client version from apt list
    when: test_repo == "main" and ansible_os_family == "Debian"
    shell: "apt-cache madison pmm2-client | grep 2.{{ pmm_release_minor_version.stdout | int -1 }} | awk '{print $3}'"
    register: pmm_old_version_deb

  - name: Set PMM Client package name with old version to install for apt
    set_fact:
      pmm_client_old: "pmm2-client={{ pmm_old_version_deb.stdout }}"
    when: test_repo == "main" and ansible_os_family == 'Debian'

  - name: Set PMM Client package name with old version to install for yum
    when: test_repo == "main" and ansible_os_family == "RedHat"
    set_fact:
      pmm_client_old: "pmm2-client-{{ pmm_old_version_rpm.stdout }}"

  - name: Set PMM Client package name to install
    when: test_repo != "main"
    set_fact:
      pmm_client_old: "pmm2-client"

  - name: Print old version
    ansible.builtin.debug:
      msg: "Installing old version: '{{ pmm_client_old }}'"

  - name: Install PMM client old deb packages
    when: ansible_os_family == "Debian"
    apt: name={{ pmm_client_old }} update_cache=yes state=present

  - name: Install PMM client old rpm packages
    when: ansible_os_family == "RedHat"
    yum: name={{ pmm_client_old }} state=present

### Setup PMM Client
  - name: Use "pmm-admin config" to connect pmm client to server
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode={{ metrics_mode }} --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Grep pmm-admin status output
    shell: "pmm-admin status"
    register: pmm_admin_status
  - debug: var=pmm_admin_status.stdout

  - name: Assert pmm-agent is connected to server
    assert:
      that:
        - "'Connected' in pmm_admin_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

### start PS 5.7
  - set_fact:
      mysql_service_name: "mysql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
#      mysql_service_name: "mysql_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server 5.7
    when: '"ps-5.7" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps_57.yml

  - name: Verify if Metric Endpoint with Auth works for Mysqld Exporter
    when: '"ps-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mysql_service_name }}', metric: 'mysql_up 1' }
## end PS

### start PSMDB 6.0
  - set_fact:
      mongo_service_name: "mongodb_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      mongo_socket_service_name: "mongodb_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
#      mongo_service_name: "mongodb_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server MongoDB 6.0
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb_60.yml

  - name: Verify MongoDB Exporter metric endpoint with Auth(including service with socket)
    when: '"psmdb-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mongo_service_name }}', metric: 'mongodb_up 1' }
      - { service_name: '{{ mongo_socket_service_name }}', metric: 'mongodb_up 1' }
### end PSMDB 6.0

### start PGSQL 13
  - set_fact:
      pgsql_service_name: "pgsql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      pgsql_socket_service_name: "pgsql_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"

  - name: Install and start Percona Server PostgreSQL 13
    when: '"pg-13" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_pdpgsql_13.yml

  - name: Verify Postgres Exporter metric endpoint with Auth works(including service with socket)
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    vars:
      retries: 3
      delay: 10
    loop:
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
### end PG

### Upgrade PMM Client
  - name: Include tasks for enabling testing repo
    when: test_repo == "testing" or test_repo == ""
    include: ../tasks/enable_testing_repo.yml

  - name: Include tasks for enabling experimental repo
    when: test_repo == "experimental"
    include_tasks: ../tasks/enable_experimental_repo.yml

  - name: Enable pmm2-client release repo
    when: test_repo == "main"
    command: percona-release enable pmm2-client release

  - name: Update apt repositories
    when: test_repo == "main" and ansible_os_family == "Debian"
    command: apt-get update -y

  - name: Update repo for redhat
    when: test_repo == "main" and ansible_os_family == "RedHat"
    shell: yum update -y
    become: true

  - name: Upgrade PMM client to the latest deb packages
    when: ansible_os_family == "Debian"
    apt: name=pmm2-client update_cache=yes state=latest

  - name: Upgrade PMM client to the latest rpm packages
    when: ansible_os_family == "RedHat"
    yum: name=pmm2-client state=latest

### Checks after upgrade
  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

  - name: Check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: Get "pmm-admin list" output
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains MongoDB instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Assert if the pmm-admin list contains MySQL
    when: '"ps-" in enabled_db | join("")'
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: "Wait for 'node_exporter' is Running"
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "node_exporter"

  - name: "Wait for 'vmagent' is Running"
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "vmagent"

  - name: "Validate 'postgresql_pgstatements_agent' is Running"
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_exporter_status.yml
    vars:
      process_name: "postgresql_pgstatements_agent"

  - name: "Wait for 'postgres_exporter' is Running"
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "postgres_exporter"

  - name: Verify Metric Endpoint with Auth works for Node Exporter
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: 'node_exporter', metric: 'node_textfile_scrape_error 0' }

  - name: Verify Metric Endpoint with Auth works for MongoDB Exporter
    when: '"psmdb-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mongo_service_name }}', metric: 'mongodb_up 1' }
      - { service_name: '{{ mongo_socket_service_name }}', metric: 'mongodb_up 1' }

  - name: Verify if Metric Endpoint with Auth works for MysqlD Exporter
    when: '"ps-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mysql_service_name }}', metric: 'mysql_up 1' }

  - name: Verify Postgres Exporter metric endpoint with Auth works
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    vars:
      retries: 3
      delay: 10
    loop:
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="exporter"} 1' }

  - name: Remove MongoDB Socket service to verify Port output in pmm-admin list commands
    when: '"psmdb-" in enabled_db | join("")'
    command: pmm-admin remove mongodb {{ mongo_socket_service_name }}

  - name: Remove PostgreSQL Socket service to verify Port output in pmm-admin list commands
    when: '"pg-" in enabled_db | join("")'
    command: pmm-admin remove postgresql {{ pgsql_socket_service_name }}

  - name: Parse and set PMM minor version
    shell: "pmm-admin --version | grep ^Version | awk -F. '{print $2}'"
    register: pmm_agent_minor_version

  - name: Include Exporters Port in output checks for 2.29.0+
    when: pmm_agent_minor_version.stdout | int >= 29
    include_tasks: ../tasks/verify_exporter_port_output.yml
    loop: "{{ ex_list|select|list }}"
    vars:
      ex_list:
        - vmagent
        - node_exporter
        - "{{ ('ps-' in enabled_db | join('')) | ternary('mysqld_exporter','') }}"
        - "{{ ('psmdb-' in enabled_db | join('')) | ternary('mongodb_exporter','') }}"
        - "{{ ('pg-' in enabled_db | join('')) | ternary('postgres_exporter','') }}"
