---
# Advanced package upgrade test:
#   prepare Percona Repository and software
#   install PMM old client deb/rpm
#   perform correct setup
#   setup PS 5.7
#   setup PSMDB 4.4
#   setup PGSQL 13
#   install PMM the latest client deb/rpm
#   verify versions, exporters still work, metrics, etc.

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"

  tasks:
  - name: Install Needed Packages, update repo for redhat
    shell: "{{item}}"
    with_items:
      - "yum install epel-release -y"
      - "yum update -y"
    when: ansible_os_family == "RedHat"
    become: true

  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

  - name: Setup environment
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### enable pmm2-client release and install old version to update
  - name: Enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: Update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: Update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: Detect and save release minor version
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-server/tags -O - | jq -r .results[].name  | grep -v latest | sort -V | tail -n1 | awk -F. '{print $2}'"
    register: pmm_release_minor_version
    when: test_repo == "main"

  - name: Grep previous release PMM Client version from yum list
    shell: "yum list pmm2-client --showduplicates | grep 2.{{ pmm_release_minor_version.stdout | int -1 | tail -n1}}"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "RedHat"

  - name: Grep previous release PMM Client version from apt list
    shell: "apt-cache madison pmm2-client | grep 2.{{ pmm_release_minor_version.stdout | int -1 }} | awk '{print $3}'"
    register: pmm_old_version
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: Set PMM Client package name with old version to install
    set_fact:
      pmm_client_old: "pmm2-client={{ pmm_old_version.stdout }}"
    when: test_repo == "main"

  - name: Set PMM Client package name to install
    set_fact:
      pmm_client_old: "pmm2-client"
    when: test_repo != "main"

  - name: Print old version
    ansible.builtin.debug:
      msg: "Installing old version: '{{ pmm_client_old }}'"

  - name: Install PMM client old deb packages
    apt: name={{ pmm_client_old }} update_cache=yes state=present
    when: ansible_os_family == "Debian"

  - name: Install PMM client old rpm packages
    yum: name={{ pmm_client_old }} state=present
    when: ansible_os_family == "RedHat"

### Setup PMM Client
  - name: Use "pmm-admin config" to connect pmm client to server
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode={{ metrics_mode }} --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Grep pmm-admin status output
    shell: "pmm-admin status"
    register: pmm_admin_status
  - debug: var=pmm_admin_status.stdout

  - name: Assert pmm-agent is connected to server
    assert:
      that:
        - "'Connected' in pmm_admin_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

### start PS 5.7
  - name: Install and start Percona Server 5.7
    include_tasks: ../tasks/start_ps57.yml

  - name: Check if Metric Endpoint with Auth works for Mysqld Exporter
    shell: "bash -x ../scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
## end PS

### start PSMDB 4.4
  - name: Install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_psmdb44.yml

  - name: Check MongoDB Exporter metric endpoint with Auth(including service with socket)
    shell: "{{item}}"
    with_items:
      - "bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
      - "bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
### end PSMDB

### start PGSQL 13
  - name: Install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_pgsql13.yml

  - name: Check Postgres Exporter metric endpoint with Auth works
    shell: "{{item}}"
    retries: 3
    delay: 10
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Check Postgres Exporter metric endpoint with Auth works(service added via socket)
    shell: "{{item}}"
    retries: 3
    delay: 10
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
### end PG

### Upgrade PMM Client
  - name: Include tasks for enabling testing repo
    include: ../tasks/enable_testing_repo.yml
    when: test_repo == "testing" or test_repo == ""

  - name: Include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: test_repo == "experimental"

  - name: Enable pmm2-client release repo
    command: percona-release enable pmm2-client release
    when: test_repo == "main"

  - name: Update apt repositories
    command: apt-get update -y
    when: test_repo == "main" and ansible_os_family == "Debian"

  - name: Update repo for redhat
    shell: yum update -y
    when: test_repo == "main" and ansible_os_family == "RedHat"
    become: true

  - name: Upgrade PMM client to the latest deb packages
    apt: name=pmm2-client update_cache=yes state=latest
    when: ansible_os_family == "Debian"

  - name: Upgrade PMM client to the latest rpm packages
    yum: name=pmm2-client state=latest
    when: ansible_os_family == "RedHat"

### Checks after upgrade
  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

  - name: Check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: Get "pmm-admin list" output
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains MongoDB instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Assert if the pmm-admin list contains MySQL
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: Assert if the pmm-admin list contains PostgreSQL instance
    assert:
      that:
        - "'PostgreSQL' in list_output.stdout"
    when: ansible_distribution == 'Ubuntu' and ansible_distribution_release != 'xenial'

  - name: Validate node_exporter status
    block:
      - name: Wait for node_exporter to be Running
        shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
        register: node_exporter_status
        until: node_exporter_status.stdout.find('Running') != -1
        delay: 5
        retries: 5
    rescue:
      - name: Print the node_exporter Status
        ansible.builtin.debug:
          msg: node_exporter status is {{ node_exporter_status.stdout }}

  - name: Validate vmagent status
    block:
      - name: Wait for vmagent to be Running Status After Upgrade
        shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
        register: vmagent_status
        until: vmagent_status.stdout.find('Running') != -1
        delay: 5
        retries: 5
    rescue:
      - name: Print the vmagent Status
        ansible.builtin.debug:
          msg: vmagent status is {{ vmagent_status.stdout }}

  - name: Check if Metric Endpoint with Auth works for Node Exporter, MysqlD Exporter, MongoDB Exporter, Postgres Exporter
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --metric_name node_textfile_scrape_error --pmm_server_ip {{pmm_server_address}} --agent_type node_exporter --metric_value 0
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Check if Metric End point with Auth works after upgrade for Postgres exporter when service was added via socket before upgrade
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Parse and set PMM minor version
    shell: "pmm-admin --version | grep ^Version | awk -F. '{print $2}'"
    register: pmm_agent_minor_version

  - name: Remove Socket services, to verify Port output in pmm-admin list commands
    command: "{{item}}"
    with_items:
      - pmm-admin remove mongodb mongodb_socket_{{ instance_ip }}
      - pmm-admin remove postgresql pgsql_socket_{{ instance_ip }}

  - name: Include Exporters Port in output checks for 2.29.0+
    include_tasks: ../tasks/exporter-port-output-checks.yml
    when: pmm_agent_minor_version.stdout | int >= 29
    with_items:
      - vmagent
      - node_exporter
      - postgres_exporter
      - mongodb_exporter
      - mysqld_exporter

  - name: Validate postgresql_pgstatements_agent status
    block:
      - shell: pmm-admin list | grep postgresql_pgstatements_agent | awk -F" " '{print $2}'
        register: pgstatements_agent_status
      - assert:
          that:
            - "'Running' in pgstatements_agent_status.stdout"
    rescue:
      - ansible.builtin.debug:
          msg: pgstatements_agent_status status is {{ postgresql_pgstatements_agent.stdout }}
