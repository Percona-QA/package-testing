---
# Advanced package test:
#   prepare Percona Repository and software
#   install PMM client deb/rpm
#   perform correct setup
#   setup PS 5.7
#   setup PSMDB 4.4
#   setup PGSQL 13
#   verify versions, metrics, exporters, etc.
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') | regex_search('\\S(.*\\S)?') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Set Integrations list
    set_fact:
      enabled_db: "{{ db_list|select|list }}"
    vars:
      db_list:
        - "{{ (false) | ternary('ps-8.0','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '9') | ternary('ps-5.7','') }}"
        - "{{ (ansible_os_family == 'Debian') | ternary('ps-5.7','') }}"
        - psmdb-6.0
        - "{{ (ansible_os_family == 'Debian') | ternary('pg-13','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '8') | ternary('pg-13','') }}"

  - name: Setup environment
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### install pmm2-client
  - name: Install PMM client new deb packages
    when: ansible_os_family == "Debian"
    apt: name=pmm2-client update_cache=yes state=latest

  - name: Install PMM client new rpm packages
    when: ansible_os_family == "RedHat"
    yum: name=pmm2-client state=latest

  - name: Check that PMM Client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

### Setup PMM Client
  - name: Use "pmm-admin config" to connect pmm client to server
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode={{ metrics_mode }} --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### start PS 5.7
  - set_fact:
      mysql_service_name: "mysql_{{ instance_ip }}"
#      mysql_service_name: "mysql_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server 5.7
    when: '"ps-5.7" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps_57.yml
## end PS 5.7

### start PSMDB 6.0
  - set_fact:
      mongo_service_name: "mongodb_{{ instance_ip }}"
      mongo_socket_service_name: "mongodb_socket_{{ instance_ip }}"
#      mongo_service_name: "mongodb_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server MongoDB 6.0
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb_60.yml
### end PSMDB 6.0

### start PGSQL 13
  - set_fact:
      pgsql_service_name: "pgsql_{{ instance_ip }}"
      pgsql_socket_service_name: "pgsql_{{ instance_ip }}"

  - name: Install and start Percona Server PostgreSQL 13
    when: '"pg-13" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_pdpgsql_13.yml
### end PG

### verifications
  - name: Check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: Validate pmm-admin list Stability
    block:
      - name: Wait for pmm-admin list to return error
        shell: "pmm-admin list "
        register: last_list
        until: "'not found.' in last_list.stdout"
        delay: 1
        retries: 100
      - name: "pmm-admin list executed 100 without any errors!"
        debug:
          msg: "100 runs succeeded! Last output: <{{last_list.stdout}}>"
    rescue:
      - name: Waiting result in error
        debug: var=last_list
        failed_when: true
