---
# This playbook installs PS/PXC client package and checks that it works correctly

- hosts: all
  name: Prepare a clean machine with percona (and EPEL) repo(s) installed
  become: true
  become_method: sudo
  vars:
    client: "{{ lookup('env', 'client_to_test') }}"
    install_mysql_shell: "{{ lookup('env', 'install_mysql_shell') }}"
  environment:
    install_mysql_shell: '{{ install_mysql_shell }}'
  tasks:
  - name: include tasks for test env setup
    import_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include: ../tasks/enable_main_repo.yml
    when: (lookup('env', 'install_repo') == "main") and (lookup('env', 'client_to_test') != "ps80")

  - name: include tasks for enabling main repo
    include: ../tasks/enable_ps8_main_repo.yml
    when: (lookup('env', 'install_repo') == "main") and (lookup('env', 'client_to_test') == "ps80")

  - name: include tasks for enabling PS 8 test repo
    include: ../tasks/enable_ps8_testing_repo.yml
    when: (lookup('env', 'install_repo') == "testing") and (lookup('env', 'client_to_test') == "ps80")

  - name: include tasks for enabling test repo
    include: ../tasks/enable_testing_repo.yml
    when: (lookup('env', 'install_repo') == "testing") and (lookup('env', 'client_to_test') != "ps80")

  - name: install deb packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
    vars:
      packages:
      - vim
    when: ansible_os_family == "Debian"

  - name: install packages in centos
    yum:
      name: "{{ packages }}"
      state: present
    vars:
      packages:
      - pv
    when: ansible_os_family == "RedHat"

  - name: Handle installation and checks for percona client using client_check.sh
    block:
      - name: install PS/PXC client and run the check
        shell: /package-testing/client_check.sh {{ client }} > client-check.log 2>&1

      - name: Log check for warnings in the previous stage
        command: /package-testing/scripts/log-warning-check.sh client-check.log
        when: (lookup('env', 'check_warnings') == "yes")

    rescue:
      - name: Fetch the output of the client_check.sh logfile on the script failure
        command: cat "client-check.log"
        register: clientcheckoutput

      - name: Display the fetched output of the client-check.log logfile
        debug:
          msg: "Version check output: {{ clientcheckoutput.stdout }}"

      - name: Fail the task due to previous issues
        fail:
          msg: Failing the further tasks due to issues in the previous task.

