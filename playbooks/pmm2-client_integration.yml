---
# Advanced package test:
#   prepare Percona Repository and software
#   install PMM client deb/rpm
#   perform correct setup
#   setup PS 5.7
#   setup PSMDB 4.4
#   setup PGSQL 13
#   verify versions, metrics, exporters, etc.
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') | regex_search('\\S(.*\\S)?') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Set Integrations list
    set_fact:
      enabled_db: "{{ db_list|select|list }}"
    vars:
      db_list:
        - "{{ (false) | ternary('ps-8.0','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '9') | ternary('ps-5.7','') }}"
        - "{{ (ansible_os_family == 'Debian') | ternary('ps-5.7','') }}"
        - psmdb-6.0
        - "{{ (ansible_os_family == 'Debian') | ternary('pg-13','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '8') | ternary('pg-13','') }}"

  - name: Setup environment
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### install pmm2-client
  - name: Install PMM client new deb packages
    when: ansible_os_family == "Debian"
    apt: name=pmm2-client update_cache=yes state=latest

  - name: Install PMM client new rpm packages
    when: ansible_os_family == "RedHat"
    yum: name=pmm2-client state=latest

  - name: Check that PMM Client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

### Setup PMM Client
  - name: Use "pmm-admin config" to connect pmm client to server
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode={{ metrics_mode }} --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### start PS 5.7
  - set_fact:
      mysql_service_name: "mysql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
#      mysql_service_name: "mysql_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server 5.7
    when: '"ps-5.7" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps_57.yml

  - name: Verify if Metric Endpoint with Auth works for Mysqld Exporter
    when: '"ps-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mysql_service_name }}', metric: 'mysql_up 1' }
## end PS 5.7

### start PSMDB 6.0
  - set_fact:
      mongo_service_name: "mongodb_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      mongo_socket_service_name: "mongodb_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
#      mongo_service_name: "mongodb_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server MongoDB 6.0
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb_60.yml

  - name: Verify MongoDB Exporter metric endpoint with Auth(including service with socket)
    when: '"psmdb-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mongo_service_name }}', metric: 'mongodb_up 1' }
      - { service_name: '{{ mongo_socket_service_name }}', metric: 'mongodb_up 1' }

  - name: Remove MongoDB service from monitoring which was added via socket
    command: pmm-admin remove mongodb {{ mongo_socket_service_name }}
### end PSMDB 6.0

### start PGSQL 13
  - set_fact:
      pgsql_service_name: "pgsql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      pgsql_socket_service_name: "pgsql_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"

  - name: Install and start Percona Server PostgreSQL 13
    when: '"pg-13" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_pdpgsql_13.yml

  - name: Verify Postgres Exporter metric endpoint with Auth works
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    vars:
      retries: 3
      delay: 10
    loop:
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="exporter"} 1' }

  - name: Remove PostgreSQL service added via socket
    when: '"pg-13" in enabled_db'
    command: pmm-admin remove postgresql {{ pgsql_socket_service_name }}
### end PG

### verifications
  - name: Check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: Parse and set PMM minor version
    shell: "pmm-admin --version | grep -oP '(?<=[.])\\w+(?=[.])' | head -1"
    register: pmm_agent_minor_version

  - name: Validate Exporters Port in output  for 2.29.0+
    when: pmm_agent_minor_version.stdout | int >= 29
    include_tasks: ../tasks/verify_exporter_port_output.yml
    loop: "{{ ex_list|select|list }}"
    vars:
      ex_list:
        - vmagent
        - node_exporter
        - "{{ ('ps-' in enabled_db | join('')) | ternary('mysqld_exporter','') }}"
        - "{{ ('psmdb-' in enabled_db | join('')) | ternary('mongodb_exporter','') }}"
        - "{{ ('pg-' in enabled_db | join('')) | ternary('postgres_exporter','') }}"

  - name: "Wait for 'node_exporter' is Running"
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "node_exporter"

  - name: Verify Node Exporter metric endpoint with Auth works
    include_tasks: ../tasks/verify_pmm2_metric.yml
    vars:
      retries: 3
      delay: 10
    loop:
      - { service_name: 'node_exporter', metric: 'node_textfile_scrape_error 0' }


  - name: "Wait for 'vmagent' is Running"
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "vmagent"

  - name: "Validate 'postgresql_pgstatements_agent' is Running"
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_exporter_status.yml
    vars:
      process_name: "postgresql_pgstatements_agent"

  - name: "Wait for 'postgres_exporter' is Running"
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "postgres_exporter"
