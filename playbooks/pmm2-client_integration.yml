---
# Advanced package test:
#   prepare Percona Repository and software
#   install PMM client deb/rpm
#   perform correct setup
#   setup PS 5.7
#   setup PSMDB 4.4
#   setup PGSQL 13
#   verify versions, metrics, exporters, etc.

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') | regex_search('\\S(.*\\S)?') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Setup environment
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### install pmm2-client
  - name: Install PMM client new deb packages
    apt: name=pmm2-client update_cache=yes state=latest
    when: ansible_os_family == "Debian"

  - name: Install PMM client new rpm packages
    yum: name=pmm2-client state=latest
    when: ansible_os_family == "RedHat"

  - name: Check that PMM Client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

### Setup PMM Client
  - name: Use "pmm-admin config" to connect pmm client to server
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode={{ metrics_mode }} --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }}

  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### start PS 5.7
  - name: Install and start Percona Server 5.7
    include_tasks: ../tasks/start_ps57.yml

  - name: Check if Metric Endpoint with Auth works for Mysqld Exporter
    shell: "bash -x ../scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
## end PS 5.7

### start PSMDB 4.4
  - name: Install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_psmdb44.yml

  - name: Check MongoDB Exporter metric endpoint with Auth(including service with socket)
    shell: "{{item}}"
    with_items:
      - "bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
      - "bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Remove mongodb service from monitoring which was added via socket
    command: pmm-admin remove mongodb mongodb_socket_{{ instance_ip }}
### end PSMDB 4.4

### start PGSQL 13
  - name: Install and start Percona Server MongoDB 4.4
    include_tasks: ../tasks/start_pgsql13.yml

  - name: Check Postgres Exporter metric endpoint with Auth works
    shell: "{{item}}"
    retries: 3
    delay: 10
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Check Postgres Exporter metric endpoint with Auth works(service added via socket)
    shell: "{{item}}"
    retries: 3
    delay: 10
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Remove PostgreSQL instances added via socket
    command: pmm-admin remove postgresql pgsql_socket_{{ instance_ip }}
### end PG

### verifications
  - name: Check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: Parse and set PMM minor version
    shell: "pmm-admin --version | grep -oP '(?<=[.])\\w+(?=[.])' | head -1"
    register: pmm_agent_minor_version

  - name: Include Exporters Port in output checks for 2.29.0+
    include_tasks: ../tasks/exporter-port-output-checks.yml
    when: pmm_agent_minor_version.stdout | int >= 29
    with_items:
      - vmagent
      - node_exporter
      - postgres_exporter
      - mongodb_exporter
      - mysqld_exporter

  - name: Validate node_exporter status
    block:
      - name: Wait for node_exporter to be Running
        shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
        register: node_exporter_status
        until: node_exporter_status.stdout.find('Running') != -1
        delay: 5
        retries: 5
    rescue:
      - name: Print the node_exporter Status
        ansible.builtin.debug:
          msg: node_exporter status is {{ node_exporter_status.stdout }}

  - name: Check Node Exporter metric endpoint with Auth works
    shell: "bash -x ../scripts/pmm2_check_metric.sh --metric_name node_textfile_scrape_error --pmm_server_ip {{pmm_server_address}} --agent_type node_exporter --metric_value 0"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
    retries: 3
    delay: 10

  - name: Validate vmagent status
    block:
      - name: Wait for vmagent to be Running
        shell: pmm-admin list | grep vmagent | awk -F" " '{print $2}'
        register: vmagent_status
        until: vmagent_status.stdout.find('Running') != -1
        delay: 5
        retries: 5
    rescue:
      - name: Print the vmagent status
        ansible.builtin.debug:
          msg: vmagent status is {{ vmagent_status.stdout }}

  - name: check postgresql_pgstatements_agent is Running
    shell: pmm-admin list | grep postgresql_pgstatements_agent | awk -F" " '{print $2}'
    register: postgresql_pgstatements_agent

  - name: Print the postgresql_pgstatements_agent Status
    ansible.builtin.debug:
      msg: postgresql_pgstatements_agent status is {{ postgresql_pgstatements_agent.stdout }}

  - name: Assert if the pmm-admin list contains postgresql_pgstatements_agent and Running State
    assert:
     that:
      - "'Running' in postgresql_pgstatements_agent.stdout"

  - name: Validate postgres_exporter_status status
    block:
      - name: Wait for postgres_exporter to have Running Status.
        shell: pmm-admin list | grep 'postgres_exporter' | awk -F" " '{print $2}'
        register: postgres_exporter_status
        until: postgres_exporter_status.stdout.find('Running') != -1
        delay: 5
        retries: 5
    rescue:
      - name: Print the vmagent status
        ansible.builtin.debug:
          msg: postgres_exporter_status status is {{ postgres_exporter_status.stdout }}
