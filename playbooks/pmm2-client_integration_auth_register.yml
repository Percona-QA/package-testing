---
# This playbook does following:
#   enables Percona testing repository
#   installs the latest version of PMM2 client
#   does PMM-T1267 test
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_package: "{{ lookup('env', 'install_package') | default('pmm2-client', true)}}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"
    cmd_admin_list: "pmm-admin list"
    pmm_auth_password: "pmm-pass"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Set Integrations list
    include_tasks: ../tasks/pmm2-client_test_enabled_db.yml

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

  - name: include tasks for test env setup
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

  - name: enable pmm2-client release repo
    when: test_repo == "release"
    command: percona-release enable pmm2-client release

  - name: update apt repositories
    when: test_repo == "release" and ansible_os_family == "Debian"
    command: apt-get update -y
    become: true

  - name: update repo for redhat
    when: test_repo == "release" and ansible_os_family == "RedHat"
    shell: yum update -y
    become: true

### install pmm2-client
  - name: install PMM client new deb packages
    when: ansible_os_family == "Debian"
    apt: name=pmm2-client update_cache=yes state=latest

  - name: install PMM client new rpm packages
    when: ansible_os_family == "RedHat"
    yum: name=pmm2-client state=latest

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

### Setup pmm client
  - name: configure pmm client to connect to server in push/auto Mode
    when: lookup('env', 'metrics_mode') == "push" or lookup('env', 'metrics_mode') == ""
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=auto --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }} --agent-password={{ pmm_auth_password }}

  - name: configure pmm client to connect to server in pull Mode
    when: lookup('env', 'metrics_mode') == "pull"
    shell: pmm-admin config --force --server-insecure-tls --metrics-mode=pull --server-url=https://admin:{{ pmm_server_password }}@{{ pmm_server_address }} {{ instance_ip }} generic node_{{ instance_ip }} --agent-password={{ pmm_auth_password }}

  - name: register pmm client exporter password
    shell: pmm-admin register --force --agent-password={{ pmm_auth_password }}

  - name: restart pmm-agent
    command: "pkill -f pmm-agent"
    become: yes

  - name: wait for pmm_agent status from pmm-admin list
    shell: pmm-admin list | grep pmm_agent | awk -F' ' '{print $2}'
    register: pmm_agent_status
    until: pmm_agent_status.stdout.find('Connected') != -1
    delay: 1
    retries: 5

  - set_fact:
      mysql_service_name: "mysql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"    

  - name: Install and start Percona Server 5.7
    when: '"ps-5.7" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps_57.yml

  - name: Install and start Percona Server 8.0
    when: '"ps-8.0" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps_80.yml

  - name: Verify if Metric Endpoint with Auth works for Mysqld Exporter
    when: '"ps-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: '{{ mysql_service_name }}', metric: 'mysql_up 1' }
## end PS

### start PSMDB 
  - set_fact:
      mongo_service_name: "mongodb_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      mongo_socket_service_name: "mongodb_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"

  - name: Install and start Percona Server MongoDB
    when: '"psmdb-" in enabled_db | join("")'
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb.yml
    vars:
      psmdb_to_test:  "{{ enabled_db | select('match', '^psmdb-*') | join('') }}"

  - name: Check if Metric End point with Auth works for MongoDB Exporter
    include_tasks: ../tasks/verify_pmm2_metric.yml
    loop:
      - { service_name: 'mongodb_{{ instance_ip }}', metric: 'mongodb_up.* 1' }
### end PSMDB

### start pgsql 13
  - set_fact:
      pgsql_service_name: "pgsql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      pgsql_socket_service_name: "pgsql_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"

  - name: Install and start Percona Server PostgreSQL 13
    when: '"pg-13" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_pdpgsql_13.yml

  - name: Verify Postgres Exporter metric endpoint with Auth works(including service with socket)
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm2_metric.yml
    vars:
      retries: 3
      delay: 10
    loop:
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
## end PG

  - name: Wait for node_exporter to be Running Status.
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: ne_status
    until: ne_status.stdout.find('Running') != -1
    delay: 5
    retries: 5

  - name: check if node_exporter is Running
    shell: pmm-admin list | grep node_exporter | awk -F" " '{print $2}'
    register: node_exporter_status

  - name: Print the node_exporter_status
    ansible.builtin.debug:
      msg: Node Exporter Status is {{ node_exporter_status.stdout }}

  - name: Assert if the pmm-admin list contains node_exporter and Running state
    assert:
      that:
        - "'Running' in node_exporter_status.stdout"

  - name: check if Metric End point with Auth works for Node Exporter
    shell: "{{item}}"
    with_items:
      - "bash -x ../scripts/pmm2_check_metric.sh --metric_name node_textfile_scrape_error --pmm_server_ip {{pmm_server_address}} --agent_type node_exporter --metric_value 0 --agent_password {{pmm_auth_password}}"

  - name: check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### Clean up
  - name: remove PMM client deb packages
    when: ansible_os_family == "Debian"
    apt: name=pmm2-client state=absent


  - name: remove PMM client rpm packages
    when: ansible_os_family == "RedHat"
    yum: name=pmm2-client state=absent
