---
# This playbook does following:
#   enables Percona main repository
#   installs previous version of PMM client and PT
#   enables Percona testing repository
#   upgrades PMM client and PT to the latest version
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml

  - name: install PMM2 client old deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: install PMM2 client old rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: Print PMM2-Client Version before upgrade
    command: pmm-admin --version
    register: version
  - debug: var=version.stderr_lines

  - name: include tasks for enabling test repo
    include_tasks: ../tasks/enable_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: upgrade PMM client to the latest deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: upgrade PMM client to the latest rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2-rc
    when: lookup('env', 'install_repo') == "experimental"

  - name: Print PMM2-Client Version After upgrade
    command: pmm-admin --version
    register: version_new
  - debug: var=version_new.stderr_lines

  - name: remove PMM client deb packages
    apt: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: remove PMM client rpm packages
    yum: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"
