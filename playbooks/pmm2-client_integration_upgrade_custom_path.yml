---
# Advanced package tarball upgrade test:
#   prepare Percona Repository and software
#   install PMM old client tarball
#   perform correct setup
#   setup PS 5.7
#   setup PSMDB 4.4
#   setup PGSQL 13
#   install PMM the latest client tarball
#   verify versions, exporters still work, metrics, etc.
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"
    custom_path: "/pmm2-client-custom-path"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Set Integrations list
    set_fact:
      enabled_db: "{{ db_list|select|list }}"
    vars:
      db_list:
        - "{{ (false) | ternary('ps-8.0','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '9') | ternary('ps-5.7','') }}"
        - "{{ (ansible_os_family == 'Debian') | ternary('ps-5.7','') }}"
        - psmdb-6.0
        - "{{ (ansible_os_family == 'Debian') | ternary('pg-13','') }}"
        - "{{ (ansible_os_family == 'RedHat' and ansible_distribution_major_version < '8') | ternary('pg-13','') }}"

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

  - name: Include tasks for test env setup
    include_tasks: ../tasks/pmm2_client_test_prepare.yml

### Detect and install(tarball) old version to update
  - name: Detect and save release version
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-client/tags -O - | jq -r .results[].name | grep -v latest | sort -V | tail -n1"
    register: latest_release

  - name: Detect and save previous release version
    shell: "wget -q https://registry.hub.docker.com/v2/repositories/percona/pmm-client/tags -O - | jq -r .results[].name | grep -v latest | sort -V | grep -E '[[:digit:]]\\.[[:digit:]]+\\.[[:digit:]]' | tail -n2 | head -n1"
    register: old_release

  - set_fact:
      old_version: "{{ old_release.stdout if (test_repo == 'main') else latest_release.stdout }}"

  - name: Print detected old PMM version to install
    ansible.builtin.debug:
      msg: pmm2 release version is {{ old_version }}

  - name: "Install old({{ old_version }}) pmm2-client tarball to custom path"
    command: "../scripts/pmm2_client_install_tarball.sh -v {{ old_version }} -p {{ custom_path }}"

### Setup PMM Client
  - name: Use pmm-agent setup to configure pmm client to connect to server
#    shell: pmm-agent setup --config-file={{ custom_path }}/config/pmm-agent.yaml --force --server-address={{ pmm_server_address }} --server-insecure-tls {{ metrics_mode }} --server-username=admin --server-password={{ pmm_server_password }} --paths-base={{ custom_path }}/ {{ instance_ip }} generic node2_{{ instance_ip }}
    shell: >-
      pmm-agent setup --config-file={{ custom_path }}/config/pmm-agent.yaml --force
      --server-address={{ pmm_server_address }}
      --server-insecure-tls
      --metrics-mode={{ metrics_mode }}
      --server-username=admin
      --server-password={{ pmm_server_password }}
      --paths-base={{ custom_path }}/
      {{ instance_ip }} generic node2_{{ instance_ip }}

  - name: Check if the configuration generated with paths-base is using the custom path
    shell: cat {{custom_path}}/config/pmm-agent.yaml | grep -o -c "{{custom_path}}" | grep "14"
    become: yes

  - name: Start agent
    shell: pmm-agent --config-file={{ custom_path }}/config/pmm-agent.yaml > pmm-agent.log 2>&1 &

  - name: Grep pmm_agent status from pmm-admin list
    shell: pmm-admin list | grep pmm_agent | awk -F" " '{print $2}'
    register: pmm_agent_status

  - name: Verify pmm-admin list contains pmm_agent with Connected status
    assert:
      that:
        - "'Connected' in pmm_agent_status.stdout"
      fail_msg: "pmm-agent is not connected to server!"
      success_msg: "pmm-agent is connected to server"

### start PS 5.7
  - set_fact:
      mysql_service_name: "mysql_{{ instance_ip }}"
#      mysql_service_name: "mysql_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server 5.7
    when: '"ps-5.7" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps_57.yml

  - name: check if Metric End point with Auth works for Mysqld Exporter
    when: '"ps-5.7" in enabled_db'
    shell: "bash -x ../scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
## end PS 5.7

### start PSMDB 6.0
  - set_fact:
      mongo_service_name: "mongodb_{{ instance_ip }}"
#      mongo_service_name: "mongodb_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server MongoDB 6.0
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb_60.yml

  - name: Check MongoDB Exporter metric endpoint with Auth(including service with socket)
    shell: "{{item}}"
    with_items:
      - "bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
      - "bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1"
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
### end PSMDB 6.0

### start PGSQL 13
  - set_fact:
      pgsql_service_name: "pgsql_{{ instance_ip }}"

  - name: Install and start Percona Server MongoDB 4.4
    when: '"pg-13" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_pdpgsql_13.yml

  - name: Check if Metric End point with Auth works for Postgres Exporter
    when: '"pg-13" in enabled_db'
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Check if Metric End point with Auth works for Postgres Exporter when service added via socket
    when: '"pg-13" in enabled_db'
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"
## end PG 13

### Upgrade PMM Client
  - name: "Install new({{ pmm_version }}) pmm2-client tarball to custom path"
    command: "../scripts/pmm2_client_install_tarball.sh -v {{ pmm_version }} -p {{ custom_path }} -u"

  - name: Stop pmm-agent process
    command: "pkill -f pmm-agent"
    become: yes

  - name: Start upgraded agent
    shell: pmm-agent --config-file={{ custom_path }}/config/pmm-agent.yaml > pmm-agent.log 2>&1 &

### Checks after upgrade
  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_client_version.yml

  - name: Check that PMM client version is correct
    include_tasks: ../tasks/verify_pmm_status_versions.yml

  - name: Check pmm2-client files
    include_tasks: ../tasks/verify_pmm_client_files.yml

  - name: Check if the configuration generated with paths-base is using the custom path after upgrade client
    shell: cat {{ custom_path }}/config/pmm-agent.yaml | grep -o -c {{ custom_path }} | grep "14"
    become: yes

  - name: Get "pmm-admin list" output
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains MongoDB instance
    assert:
      that:
        - "'MongoDB' in list_output.stdout"

  - name: Assert if the pmm-admin list contains MySQL
    when: '"ps-" in enabled_db | join("")'
    assert:
      that:
        - "'MySQL' in list_output.stdout"

  - name: "Wait for 'node_exporter' is Running"
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "node_exporter"

  - name: "Wait for 'vmagent' is Running"
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "vmagent"

  - name: "Validate 'postgresql_pgstatements_agent' is Running"
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_exporter_status.yml
    vars:
      process_name: "postgresql_pgstatements_agent"

  - name: "Wait for 'postgres_exporter' is Running"
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/wait_exporter_is_running.yml
    vars:
      process_name: "postgres_exporter"

  - name: Check if Metric Endpoint with Auth works for Node Exporter, MysqlD Exporter, MongoDB Exporter, Postgres Exporter
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --metric_name node_textfile_scrape_error --pmm_server_ip {{pmm_server_address}} --agent_type node_exporter --metric_value 0
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mongodb_socket_{{ instance_ip }} --metric_name mongodb_up --pmm_server_ip {{pmm_server_address}} --agent_type mongodb_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Check if Metric Endpoint with Auth works for Node Exporter, MysqlD Exporter, MongoDB Exporter, Postgres Exporter
    when: '"ps-" in enabled_db | join("")'
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name mysql_{{ instance_ip }} --metric_name mysql_up --pmm_server_ip {{pmm_server_address}} --agent_type mysqld_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Check if Metric End point with Auth works after upgrade for Postgres exporter when service was added via socket before upgrade
    when: '"pg-" in enabled_db | join("")'
    shell: "{{item}}"
    with_items:
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_{{ instance_ip }} --metric_name pg_up{collector=\"\exporter\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.hr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.lr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
      - bash -x ../scripts/pmm2_check_metric.sh --service_name pgsql_socket_{{ instance_ip }} --metric_name pg_up{collector=\"\custom_query.mr\"\} --pmm_server_ip {{pmm_server_address}} --agent_type postgres_exporter --metric_value 1
    environment:
      ADMIN_PASSWORD: "{{ pmm_server_password }}"

  - name: Remove MongoDb Socket service, to verify Port output in pmm-admin list commands
    when: '"psmdb-" in enabled_db | join("")'
    command: pmm-admin remove mongodb mongodb_socket_{{ instance_ip }}

  - name: Remove PostgreSQL Socket service, to verify Port output in pmm-admin list commands
    when: '"pg-" in enabled_db | join("")'
    command: pmm-admin remove postgresql pgsql_socket_{{ instance_ip }}

  - name: Parse and set PMM minor version
    shell: "pmm-admin --version | grep ^Version | awk -F. '{print $2}'"
    register: pmm_agent_minor_version

  - name: Include Exporters Port in output checks for 2.29.0+
    when: pmm_agent_minor_version.stdout | int >= 29
    include_tasks: ../tasks/verify_exporter_port_output.yml
    loop: "{{ ex_list|select|list }}"
    vars:
      ex_list:
        - vmagent
        - node_exporter
        - "{{ ('ps-' in enabled_db | join('')) | ternary('mysqld_exporter','') }}"
        - "{{ ('psmdb-' in enabled_db | join('')) | ternary('mongodb_exporter','') }}"
        - "{{ ('pg-' in enabled_db | join('')) | ternary('postgres_exporter','') }}"
