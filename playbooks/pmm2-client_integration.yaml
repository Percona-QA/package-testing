---
# This playbook does following:
#   enables Percona testing repository
#   installs latest version of PMM2 client
#   does some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"

  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling test repo
    include_tasks: ../tasks/enable_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling experimental repo
    include_tasks: ../tasks/enable_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: install PMM client new deb packages
    apt: name={{item}} update_cache=yes state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: install PMM client new rpm packages
    yum: name={{item}} state=latest
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"

  - name: check that PMM client version is correct
    command: /package-testing/version_check.sh pmm2

  - name: configure pmm client to connect to server
    shell: pmm-agent setup --server-address={{ pmm_server_address }}:443 --server-insecure-tls --server-username=admin --server-password=admin $(ip addr show|grep "inet 10."|grep -o "10.*/"|sed 's:/::')

### start PS
  - name: install Percona Server 5.7 packages
    include_tasks: ../tasks/install_ps57.yml

  - name: start mysql service with service command
    command: service mysql start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mysql service with systemctl command
    command: systemctl start mysql
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: add mysql metrics and queries to monitoring
    command: /package-testing/scripts/pmm2_add_instance.sh mysql

  - name: check if mysql monitoring running
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mysql
    assert:
      that:
        - "'mysql_package_testing' in list_output.stdout"
### end PS

### start PSMDB
  - name: install Percona Server for MongoDB 3.6
    include_tasks: ../tasks/install_psmdb_36.yml

  - name: start mongod with init script
    command: /etc/init.d/mongod start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "5"

  - name: start mongod with service
    command: service mongod start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

  - name: start mongod with systemctl
    command: systemctl start mongod
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "7"

  - name: add mongodb metrics to monitoring
    command: pmm-admin add mongodb mongodb_package_testing
    when: ansible_distribution_release != "wheezy"

  - name: check if mongodb monitoring is running
    command: pmm-admin list
    register: list_output

  - name: Assert if the pmm-admin list contains mongodb instance
    assert:
      that:
        - "'mongodb_package_testing' in list_output.stdout"
### end PSMDB

  - name: run pmm-admin list
    command: pmm-admin list

  - name: run pmm-admin remove mysql
    command: pmm-admin remove mysql mysql_package_testing

  - name: run pmm-admin remove mongodb
    command: pmm-admin remove mongodb mongodb_package_testing

  - name: remove PMM client deb packages
    apt: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "Debian"

  - name: remove PMM client rpm packages
    yum: name={{item}} state=absent
    with_items:
    - pmm2-client
    when: ansible_os_family == "RedHat"