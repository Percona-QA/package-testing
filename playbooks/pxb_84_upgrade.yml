---
# This playbook does following:
#   sets main Percona repo
#   installs PS 8.0, PT and PXB 8.0
#   changes repo to testing
#   upgrades packages to the new version
#   does some tests
#

# Cosmic is still missing python
# - import_playbook: test_prep.yml

- hosts: all
  become: true
  become_method: sudo
  vars:
    gnupg_home: /root/.gnupg
    percona_key1: 4D1BB29D63D98E422B2113B19334A25F8507EFA5
    percona_key1_file: "{{ gnupg_home }}/PERCONA-PACKAGING-KEY"
  environment:
    PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"

  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

# INSTALL PS MAIN REPO

  - name: include tasks for enabling PS 84 main repo
    include_tasks: ../tasks/enable_ps84_main_repo.yml
    when:
      - ansible_distribution_major_version != "2023"

  - name: install Percona Server 8.4 packages
    include_tasks:
      file: ../tasks/install_ps84.yml
      apply:
        environment:
          PERCONA_TELEMETRY_DISABLE: "1"
    when:
      - lookup('env', 'server_to_test') == "ps-84"
      - ansible_distribution_major_version != "2023"

  - name: Install percona release if ms-84 is selected
    include_tasks: ../tasks/install_percona-release.yml
    when:
      - lookup('env', 'server_to_test') == "ms-84"

# INSTALL MS (MAIN REPO)

  - name: Extract PXB major and minor version number using shell commands
    shell: cat /package-testing/VERSIONS | grep 'PXB84_VER' | cut -d'=' -f2 | sed 's/"//g'
    register: pxb_version_major_minor_register

  - name: Extract PXB major version number using shell commands
    shell: cat /package-testing/VERSIONS | grep PXB84_VER | awk -F'[=".]' '{print $3"."$4}'
    register: pxb_version_major_register

  - name: Extract version number using shell commands
    shell: cat /package-testing/VERSIONS | grep -oP 'PXB84_VER="\K(\d+)\.(\d+)' | tr -d '.'
    register: major_release_version_register

  - name: Set major_release_version variable
    set_fact:
      major_release_version_reg: "{{ major_release_version_register.stdout }}"

  - name: Set pxb_version_major variable
    set_fact:
      pxb_version_major_reg: "{{ pxb_version_major_register.stdout }}"

  - name: Set pxb_version_major_minor variable
    set_fact:
      pxb_version_major_minor_reg: "{{ pxb_version_major_minor_register.stdout }}"

  - name: DEBUG  PXB version number
    debug:
      msg: "PXB version number is {{ pxb_version_major_reg }} {{ pxb_version_major_minor_reg }}"

  - name: install MYSQL MS Server {{ pxb_version_major_reg }} packages
    include_tasks: ../tasks/install_ms_innovation_lts.yml
    vars:
      pxb_version_major: "{{ pxb_version_major_reg }}"
      pxb_version_major_minor: "{{ pxb_version_major_minor_reg }}"
    when:
      - lookup('env', 'server_to_test') == "ms-84"

  #### FOR AL2023 ######
  - name: include tasks for enabling PS 84 pro repo
    include_tasks: ../tasks/enable_ps84_pro_tools_repo.yml
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"
      - ansible_distribution_major_version == "2023"

  - name: install Percona Server{{ pro_suf }} 8.4 packages on AL2023
    include_tasks: ../tasks/install_ps84.yml
    vars:
      pro_suf: "{{ '-pro' if lookup('env', 'REPO_TYPE') == 'PRO' else '' }}"
    when:
      - lookup('env', 'REPO_TYPE') == 'PRO'
      - ansible_distribution_major_version == "2023"
##########

  - name: Enable PXB 84 repo RELEASE REPO
    command: percona-release enable-only pxb-84-lts release
    when:
      - lookup('env', 'REPO_TYPE') != "PRO"

  - name: install Percona XtraBackup 8.4 packages MAIN REPO
    include_tasks:
      file: ../tasks/install_pxb84.yml
      apply:
        environment:
          PERCONA_TELEMETRY_DISABLE: "1"
    when:
      - lookup('env', 'REPO_TYPE') != "PRO"

  #####Enable and install PXB 80 PRO ###########
  - name: include tasks for enabling PXB pro repo for MAin
    include_tasks: ../tasks/enable_pxb84_pro_repo.yml
    vars:
      repo: "release"
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"
      - lookup('env', 'server_to_test') == "ps-84"
      - ansible_os_family == "RedHat"

  - name: include tasks for enabling PXB pro repo for MAin
    include_tasks: ../tasks/enable_pxb84_pro_repo.yml
    vars:
      repo: "main"
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"
      - lookup('env', 'server_to_test') == "ps-84"
      - ansible_os_family == "Debian"

  - name: install Percona XtraBackup 8.4 PRO packages MAIN
    include_tasks: ../tasks/install_pxb84_pro.yml
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"
      - lookup('env', 'server_to_test') == "ps-84"
##############################################


## CHECK VERSIONS BEFORE UPGRADE
  - name: Print the version of the installed Percona XtraBackup BEFORE UPGRADE
    shell: |
      {
        echo "XTRABACKUP VERSION is ";
        xtrabackup --version || echo "FAILED: xtrabackup --version";
        echo "xbstream VERSION is ";
        xbstream --version || echo "FAILED: xbstream --version";
        echo "xbcloud VERSION is ";
        xbcloud --version || echo "FAILED: xbcloud --version";
        echo "xbcrypt VERSION is ";
        xbcrypt --version || echo "FAILED: xbcrypt --version";
        echo "list rpm packages ";
        rpm -qa | grep "percona" || echo "FAILED: rpm -qa | grep percona";
        echo "list deb packages";
        dpkg -l | grep "percona" || echo "FAILED: dpkg -l | grep percona";
      }
    register: version_output
    ignore_errors: yes

  - name: Display version information BEFORE UPGRADE
    debug:
      var: version_output.stdout_lines

## Start mysql services

  - name: start mysql service with systemctl command
    command: systemctl start mysqld
    when: ansible_os_family == "RedHat"

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: copy .my.cnf with credentials on centos
    template: src=../templates/my_57.j2
              dest=/root/.my.cnf
              mode=0640 owner=root group=root
    when: ansible_os_family == "RedHat"

  - name: restart mysql service
    service: name=mysqld state=restarted
    when: ansible_os_family == "RedHat"

  - name: restart mysql service debian
    service: name=mysql state=restarted
    when: ansible_os_family == "Debian"

  - name: install plugins, import world database
    command: /package-testing/plugins_test.sh

  - name: install 3rd party packages with apt
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - rsyslog-mysql
    when: ansible_os_family == "Debian"

##
  - name: check telemetry (disabled)
    command: /package-testing/check_telemetry.sh pxb -d
    when: lookup('env', 'REPO_TYPE') != "PRO"

  - name: remove Percona Server rpm packages BEFORE UPGRADE
    include_tasks: ../tasks/remove_pxb84.yml
    when: 
      - ansible_os_family == "RedHat"

## ENABLE PXB REPOS NORMAL / PRO

  - name: Enable PXB 84 testing repo
    command: percona-release enable-only pxb-84-lts testing
    when: lookup('env', 'REPO_TYPE') != "PRO"

  - name: include tasks for enabling PXB 84 TESTING repo UPGRADE
    include_tasks:
      file: ../tasks/install_pxb84.yml
      apply:
        environment:
          PERCONA_TELEMETRY_DISABLE: "1"
    when: lookup('env', 'REPO_TYPE') != "PRO"

  #####Enable and install PXB 80 PRO Testing ###########
  - name: include tasks for enabling PXB pro repo for Testing
    include_tasks: ../tasks/enable_pxb84_pro_repo.yml
    vars:
      repo: "testing"
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"
      - lookup('env', 'server_to_test') == "ps-84"

  - name: install Percona XtraBackup 8.4 PRO packages testing
    include_tasks: ../tasks/install_pxb84_pro.yml
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"
      - lookup('env', 'server_to_test') == "ps-84"
##############################################

  - name: check telemetry (disabled)
    command: /package-testing/check_telemetry.sh pxb -d
    when:
      - lookup('env', 'REPO_TYPE') !="PRO"
##
## VERSION CHECK

  - name: Print the version of the installed Percona XtraBackup AFTER UPGRADE
    shell: |
      {
        echo "XTRABACKUP VERSION is ";
        xtrabackup --version || echo "FAILED: xtrabackup --version";
        echo "xbstream VERSION is ";
        xbstream --version || echo "FAILED: xbstream --version";
        echo "xbcloud VERSION is ";
        xbcloud --version || echo "FAILED: xbcloud --version";
        echo "xbcrypt VERSION is ";
        xbcrypt --version || echo "FAILED: xbcrypt --version";
        echo "list rpm packages ";
        rpm -qa | grep "percona" || echo "FAILED: rpm -qa | grep percona";
        echo "list deb packages";
        dpkg -l | grep "percona" || echo "FAILED: dpkg -l | grep percona";
      }
    register: version_output
    ignore_errors: yes

  - name: Display version information AFTER UPGRADE
    debug:
      var: version_output.stdout_lines

  - name: check that Percona XtraBackup version is correct PRO
    command: /package-testing/version_check.sh pxb84 pro
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"

  - name: check that Percona XtraBackup version is correct NON PRO
    command: /package-testing/version_check.sh pxb84
    when:
      - lookup('env', 'REPO_TYPE') != "PRO"

  - name: check that Percona XtraBackup package versions are correct NON-PRO
    command: /package-testing/package_check.sh pxb84
    when:
      - lookup('env', 'REPO_TYPE') != "PRO"

  - name: check that Percona XtraBackup package versions are correct PRO
    command: /package-testing/package_check.sh pxb84 pro
    when:
      - lookup('env', 'REPO_TYPE') == "PRO"

  - name: run backup after update
    command: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/

  - name: prepare backup after update
    command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/

  - name: remove Percona Server deb packages
    apt:
      name: "{{ packages }}"
      update_cache: no
      state: absent
    vars:
      packages:
      - percona-server-server
      - percona-xtrabackup-84
    when: 
      - ansible_os_family == "Debian"
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: remove Percona Server rpm packages
    dnf:
      name: "{{ packages }}"
      state: absent
    vars:
      packages:
      - percona-server-server
      - percona-xtrabackup-84
    when:
      - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: Install iptables on RHEL
    dnf:
      name:
        - iptables
        - iptables-services
      state: present
    when:
      - ansible_facts['distribution'] in ["RedHat", "CentOS", "OracleLinux", "Amazon"]
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: Enable and start iptables service
    systemd:
      name: iptables
      state: started
      enabled: true
    when:
      - ansible_facts['distribution'] == "RedHat"
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: Block pmm.check-dev.percona.com IP for non REDHAT
    iptables:
      chain: OUTPUT
      destination: check-dev.percona.com
      jump: DROP
    when:
      - lookup('env', 'upgrade_repo') == ""
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: install PXB packages for telemetry
    include_tasks: ../tasks/install_pxb84.yml
    when:
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: check telemetry (disabled)
    command: /package-testing/check_telemetry.sh pxb -u
    when:
      - lookup('env', 'REPO_TYPE') !="PRO"

  - name: remove PXB packages for telemetry
    include_tasks: ../tasks/remove_pxb84.yml
    when:
      - lookup('env', 'REPO_TYPE') !="PRO"
