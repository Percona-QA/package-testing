---
# Advanced tarball upgrade test:
#   prepare Percona Repository and software;
#   install PMM old client tarball;
#   perform correct setup;
#   setup PS, PSMDB and PDPGSQL;
#   install the latest PMM client tarball;
#   verify versions, exporters still work, metrics, etc.
#
- hosts: all
  become: true
  become_method: sudo
  vars:
    pmm_server_address: "{{ lookup('env', 'PMM_SERVER_IP') }}"
    pmm_server_password: "{{ lookup('env', 'ADMIN_PASSWORD') | default('admin', true) }}"
    test_package: "{{ lookup('env', 'install_package') | default('pmm3-client', true)}}"
    test_repo: "{{ lookup('env', 'install_repo') }}"
    metrics_mode: "{{ lookup('env', 'METRICS_MODE') | default('auto', true) }}"
    pmm_version: "{{ lookup('env', 'PMM_VERSION') }}"
    tarball_link: "{{ lookup('env', 'TARBALL_LINK') }}"
    old_tarball_link: "{{ lookup('env', 'OLD_TARBALL_LINK') }}"
    old_version: "{{ lookup('env', 'TARBALL_LINK') }}"

  tasks:
  - name: Register Instance IP
    shell: echo $(ip route get 8.8.8.8 | awk -F"src " 'NR==1{split($2,a," ");print a[1]}')
    register: instance_ip

  - name: Register Instance IP as a variable
    set_fact:
      instance_ip: "{{ instance_ip.stdout }}"

  - name: Set Integrations list
    include_tasks: ../tasks/pmm3-client_test_enabled_db_arm.yml
    when: ansible_architecture == "aarch64"

  - name: Set Integrations list
    include_tasks: ../tasks/pmm3-client_test_enabled_db.yml
    when: ansible_architecture != "aarch64"

  - name: include tasks for test env setup
    include_tasks: ../tasks/pmm3_client_test_prepare.yml

  - set_fact:
      rnd: "{{ 1000 | random }}"
    run_once: yes

### install PMM Client from tarball
  - name: install pmm3-client tarball to custom path
    command: "../scripts/pmm3_client_install_tarball.sh -v {{ old_tarball_link }}"

### Setup PMM Client
  - name: Use pmm-agent setup to configure pmm client to connect to server
    shell: >-
      pmm-agent setup --config-file=/usr/local/percona/pmm/config/pmm-agent.yaml --force --server-insecure-tls
      --server-address={{ pmm_server_address }}
      --metrics-mode={{ metrics_mode }}
      --server-username=admin
      --server-password={{ pmm_server_password }}
      {{ instance_ip }} generic node2_{{ instance_ip }}

  - name: Check if the configuration generated with paths-base is using the custom path
    include_tasks: ../tasks/verify_pmm3_client_config.yml

  - name: Start agent
    shell: pmm-agent --debug --config-file=/usr/local/percona/pmm/config/pmm-agent.yaml > pmm-agent.log 2>&1 &

  - name: "Verify PMM client version is {{ pmm_version }}"
    include_tasks: ../tasks/verify_pmm_status_versions.yml

### start PS
  - set_fact:
      mysql_service_name: "mysql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
#      mysql_service_name: "mysql_{{ rnd }}_{{ instance_ip }}"

  - name: Show the contents of my_var
    debug:
      var: enabled_db

  - name: Install and start Percona Server
    when: '"ps-" in enabled_db'
    include_tasks: ../tasks/install_and_add_to_pmm_ps.yml
    vars:
      ps_to_test:  "{{ enabled_db | select('match', '^ps-*') | join('') }}"

  - name: Verify if Metric Endpoint with Auth works for Mysqld Exporter
    when: '"ps-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm3_service_metric.yml
    loop:
      - { service_name: '{{ mysql_service_name }}', metric: 'mysql_up 1' }
## end PS

### start PSMDB
  - set_fact:
      mongo_service_name: "mongodb_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      mongo_socket_service_name: "mongodb_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
#      mongo_service_name: "mongodb_{{ rnd }}_{{ instance_ip }}"

  - name: Install and start Percona Server MongoDB
    when: '"psmdb-" in enabled_db | join("") and mongodb_connection_type != "gssapi"'
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb.yml
    vars:
      psmdb_to_test:  "{{ enabled_db | select('match', '^psmdb-*') | join('') }}"

  - name: Install and start Percona Server MongoDB with GSSAPI
    when: '"psmdb-" in enabled_db | join("") and mongodb_connection_type == "gssapi"'
    include_tasks: ../tasks/install_and_add_to_pmm_psmdb_gssapi.yml
    vars:
      psmdb_to_test:  "{{ enabled_db | select('match', '^psmdb-*') | join('') }}"

  - name: Verify MongoDB Exporter metric endpoint with Auth
    when: '"psmdb-" in enabled_db | join("") and mongodb_connection_type != "gssapi"'
    include_tasks: ../tasks/verify_pmm3_service_metric.yml
    loop:
      - { service_name: '{{ mongo_service_name }}', metric: 'mongodb_up.* 1' }
      - { service_name: '{{ mongo_socket_service_name }}', metric: 'mongodb_up.* 1' }

  - name: Verify MongoDB Exporter metric endpoint with Auth
    when: '"psmdb-" in enabled_db | join("") and mongodb_connection_type == "gssapi"'
    include_tasks: ../tasks/verify_pmm3_service_metric.yml
    loop:
      - { service_name: '{{ mongo_service_name }}', metric: 'mongodb_up.* 1' }
### end PSMDB

### start PDPGSQL
  - set_fact:
      pgsql_service_name: "pgsql_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"
      pgsql_socket_service_name: "pgsql_socket_{{ instance_ip }}_{{ ansible_distribution }}_{{ ansible_distribution_major_version }}"

  - name: Install and start Percona Server PostgreSQL
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/install_and_add_to_pmm_pdpgsql.yml
    vars:
      pg_to_test: "{{ enabled_db | select('match', '^pg-*') | join('') }}"

  - name: Verify Postgres Exporter metric endpoint with Auth works(including service with socket)
    when: '"pg-" in enabled_db | join("")'
    include_tasks: ../tasks/verify_pmm3_service_metric.yml
    vars:
      retries: 3
      delay: 10
    loop:
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.hr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.lr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="custom_query.mr"} 1' }
      - { service_name: '{{ pgsql_socket_service_name }}', metric: 'pg_up{collector="exporter"} 1' }
### end PG

### Upgrade PMM Client package
  - name: install pmm3-client tarball to custom path
    command: "../scripts/pmm3_client_install_tarball.sh -v {{ (tarball_link | length > 0) | ternary(tarball_link, pmm_version) }} -u"

  - name: Stop pmm-agent process
    command: "pkill -f pmm-agent"
    become: yes

  - name: Start upgraded agent
    shell: pmm-agent --config-file=/usr/local/percona/pmm/config/pmm-agent.yaml > pmm-agent.log 2>&1 &

### Verifications after upgrade
  - name: Perform standard verifications set for PMM Client
    include_tasks: ../tasks/verifications_set_for_pmm3_client_after_upgrade.yml
