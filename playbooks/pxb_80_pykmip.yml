---
# This playbook does the following:
#   enables Percona testing repository
#   installs latest version of PyKmip, PS 8.0, PXB 8.0 and runs some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    install_mysql_shell: "{{ lookup('env', 'install_mysql_shell', default='') }}"
    gnupg_home: /root/.gnupg
    percona_key1: 4D1BB29D63D98E422B2113B19334A25F8507EFA5
    percona_key1_file: "{{ gnupg_home }}/PERCONA-PACKAGING-KEY"
    certs_dir: /tmp/certs
    container_name: kmip
  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: disable selinux for RedHat/CentOS
    selinux: state=disabled
    when: ansible_os_family == "RedHat"

  - name: include tasks for enabling PS 8 test repo
    include_tasks: ../tasks/enable_ps8_main_repo.yml
    when: 
      - lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS 8 test repo
    include_tasks: ../tasks/enable_ps8_testing_repo.yml
    when: 
      - lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling PS 8 experimental repo
    include_tasks: ../tasks/enable_ps8_experimental_repo.yml
    when: 
      - lookup('env', 'install_repo') == "experimental"
      
  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: Install libgflags-dev for rhel9 aarm64
    yum:
      name: https://dl.fedoraproject.org/pub/epel/9/Everything/aarch64/Packages/g/gflags-2.2.2-9.el9.aarch64.rpm
      state: present
      disable_gpg_check: yes
    when: 
      - ansible_os_family == "RedHat" 
      - ansible_distribution_major_version == "9"
      - ansible_architecture == "aarch64"

  - name: Install libgflags-dev for rhel9 amd64
    yum:
      name: https://dl.fedoraproject.org/pub/epel/9/Everything/x86_64/Packages/g/gflags-2.2.2-9.el9.x86_64.rpm
      state: present
      disable_gpg_check: yes
    when: 
      - ansible_os_family == "RedHat" 
      - ansible_distribution_major_version == "9"
      - ansible_architecture != "aarch64"
      
  - name: install Percona Server 8.0 packages
    include_tasks: ../tasks/install_ps80.yml
    when:
      - lookup('env', 'server_to_test') == "ps-80"

# INSTALL MS 

  - name: Extract PXB major and minor version number using shell commands
    shell: cat /package-testing/VERSIONS | grep 'PXB80_VER' | cut -d'=' -f2 | sed 's/"//g'
    register: pxb_version_major_minor_register

  - name: Extract PXB major version number using shell commands
    shell: cat /package-testing/VERSIONS | grep PXB80_VER | awk -F'[=".]' '{print $3"."$4}'
    register: pxb_version_major_register

  - name: Extract version number using shell commands
    shell: cat /package-testing/VERSIONS | grep -oP 'PXB80_VER="\K(\d+)\.(\d+)' | tr -d '.'
    register: major_release_version_register

  - name: Set major_release_version variable
    set_fact:
      major_release_version_reg: "{{ major_release_version_register.stdout }}"

  - name: Set pxb_version_major variable
    set_fact:
      pxb_version_major_reg: "{{ pxb_version_major_register.stdout }}"

  - name: Set pxb_version_major_minor variable
    set_fact:
      pxb_version_major_minor_reg: "{{ pxb_version_major_minor_register.stdout }}"

  - name: DEBUG  PXB version number
    debug:
      msg: "PXB version number is {{ pxb_version_major_reg }} {{ pxb_version_major_minor_reg }}"
      
  - name: install MYSQL MS Server {{ pxb_version_major_reg }} packages
    include_tasks: ../tasks/install_ms_innovation_lts.yml
    vars:
      pxb_version_major: "{{ pxb_version_major_reg }}"
      pxb_version_major_minor: "{{ pxb_version_major_minor_reg }}"
    when:
      - lookup('env', 'server_to_test') == "ms-80"

##

  - name: install sysbench new deb packages
    include_tasks: ../tasks/install_sysbench.yml
    when: lookup('env', 'install_repo') != "experimental" and ansible_distribution_release != "bullseye" and ansible_distribution_release != "noble"  and ansible_distribution_release != "focal"

  - name: list installed packages
    include_tasks: ../tasks/list_installed_packages.yml

#  - name: List the services available
#    shell: systemctl list-units --type=service | grep mysqld
#    register: services
#
#  - name: Print the services
#    debug:
#      var: services

  - name: stop mysql service RHEL
    service: name=mysqld state=stopped
    when: ansible_os_family == "RedHat"

  - name: stop mysql service DEBIAN
    service: name=mysql state=stopped
    when: ansible_os_family == "Debian"

  - name: remove mysql data directory
    command: rm -r /var/lib/mysql

  - name: install python3-pip on RedHat/CentOS
    yum:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"

  - name: install python3-pip on Debian/Ubuntu
    apt:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: Install dependencies (Debian/Ubuntu)
    apt:
      name:
        - python3
        - python3-pip
        - python3-dev
        - libffi-dev
        - libssl-dev
        - openssl
      state: present
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: Install dependencies (RedHat/CentOS)
    package:
      name:
        - python3
        - python3-pip
        - python3-devel
        - libffi-devel
        - openssl-devel
        - openssl
      state: present
    when: ansible_os_family == "RedHat"

  - name: Include tasks for installing docker
    include_tasks: ../tasks/install_docker.yml

  - name: Run KMIP container
    docker_container:
      name: "{{ container_name }}"
      image: satyapercona/kmip:latest
      state: started
      detach: true
      ports:
        - "5696:5696"
      security_opts:
        - seccomp=unconfined
      capabilities:
        - NET_ADMIN
      auto_remove: true
##      

  - name: Create certificates directory
    file:
      path: "{{ certs_dir }}"
      state: directory
      mode: '0755'
      
  - name: Wait for container to be ready
    wait_for:
      port: 5696
      host: localhost
      timeout: 60
      delay: 10
      
  - name: Wait for certificate generation
    pause:
      seconds: 20
      prompt: "Waiting for KMIP service to generate certificates..."
      
  - name: Check container status and logs
    command: docker logs --tail 10 {{ container_name }}
    register: container_logs
    
  - name: Display recent container logs
    debug:
      msg: "Recent logs: {{ container_logs.stdout_lines }}"
      
  - name: Copy certificates with retry
    command: >
      docker cp {{ container_name }}:/opt/certs/{{ item.src }} 
      {{ certs_dir }}/{{ item.dest }}
    register: copy_result
    until: copy_result.rc == 0
    retries: 3
    delay: 5
    loop:
      - { src: "root_certificate.pem", dest: "vault-kmip-ca.pem" }
      - { src: "client_key_jane_doe.pem", dest: "mysql-client-key.pem" }
      - { src: "client_certificate_jane_doe.pem", dest: "mysql-client-cert.pem" }
    
  - name: Verify copied certificates
    stat:
      path: "{{ certs_dir }}/{{ item }}"
    register: cert_files
    loop:
      - vault-kmip-ca.pem
      - mysql-client-key.pem
      - mysql-client-cert.pem
      
  - name: Display certificate copy results
    debug:
      msg: "{{ item.item }}: {{ item.stat.exists | ternary('✅ Success', '❌ Failed') }}"
    loop: "{{ cert_files.results }}"
##
  - name: copy the global manifest for mysql
    copy:
        src: /package-testing/kmip/mysqld.my
        dest: /usr/sbin/
        remote_src: yes

  - name: copy the global configuration file for mysql in Redhat/CentOS
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib64/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: copy the global configuration file for mysql in Debian/Ubuntu
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: copy the encryption config file on Debian/Ubuntu
    copy:
        src: /package-testing/kmip/encryption.j2
        dest: /etc/mysql/conf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

  - name: copy the encryption config file on RHEL/CentOS/Amazon
    copy:
        src: /package-testing/kmip/encryption.j2
        dest: /etc/my.cnf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: start mysql service debian
    service: name=mysql state=started
    when: ansible_os_family == "Debian"

  - name: start mysql service rhel
    service: name=mysqld state=started
    when: ansible_os_family == "RedHat"

  - name: check mysql service status
    command: /package-testing/check_running.sh mysql running

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: import world database
    command: /package-testing/plugins_test.sh

  - name: Enable PXB 80 repo testing
    command: percona-release enable-only pxb-80 testing
    when:
      - lookup('env', 'install_repo') == "testing"

  - name: Enable PXB 80 repo main
    command: percona-release enable-only pxb-80 release
    when:
      - lookup('env', 'install_repo') == "main"

  - name: install Percona XtraBackup 8.0 packages
    include_tasks: ../tasks/install_pxb80.yml

  - name: check that Percona XtraBackup version is correct
    command: /package-testing/version_check.sh pxb80

  - name: check that Percona XtraBackup package versions are correct
    command: /package-testing/package_check.sh pxb80

  - name: run backup
    shell: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/ > /var/log/xb_run_backup.log 2>&1

  - name: prepare backup on Redhat/CentOS
    shell: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/ --xtrabackup-plugin-dir=/usr/lib64/mysql/plugin --component-keyring-config=/usr/lib64/mysql/plugin/component_keyring_kmip.cnf > /var/log/xb_prepare_backup.log 2>&1
    when: ansible_os_family == "RedHat"

  - name: prepare backup on Debian/Ubuntu
    shell: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/ --xtrabackup-plugin-dir=/usr/lib/mysql/plugin --component-keyring-config=/usr/lib/mysql/plugin/component_keyring_kmip.cnf > /var/log/xb_prepare_backup.log 2>&1
    when: ansible_os_family == "Debian"

  - name: save contents of xb_run_backup.log
    shell: cat /var/log/xb_run_backup.log
    register: xb_run_backup_log

  - name: debug xb_run_backup_log
    debug:
      msg: "{{ xb_run_backup_log.stdout_lines }}"

  - name: save contents of xb_prepare_backup.log
    shell: cat /var/log/xb_prepare_backup.log
    register: xb_prepare_backup_log

  - name: debug xb_prepare_backup_log
    debug:
      msg: "{{ xb_prepare_backup_log.stdout_lines }}"
