---
# This playbook does the following:
#   enables Percona testing repository
#   installs latest version of PS with kms component and runs some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
      key_id: "{{ lookup('env', 'KMS_KEY_ID') }}"
      access_key: "{{ lookup('env', 'AWS_ACCESS_KEY_ID') }}"
      secret_key: "{{ lookup('env', 'AWS_SECRET_ACCESS_KEY') }}"
  environment:
    PERCONA_TELEMETRY_URL: "https://check-dev.percona.com/v1/telemetry/GenericReport"    

  tasks:

  - name: Extract version number using shell commands
    shell: cat ../VERSIONS | grep -oP 'PS_INN_LTS_VER="\K(\d+)\.(\d+)' | tr -d '.'
    register: major_release_version

  - name: Set major_release_version variable
    set_fact:
      major_release_version: "{{ major_release_version.stdout }}"

  - name: Extract values using shell command for repo name used for innovation/lts release
    shell: grep 'PS_INN_LTS_REPO=' ../VERSIONS | cut -d'=' -f2 | tr -d '"'
    register: ps_inn_lts_repo_name

  - name: Set major_release_version variable
    set_fact:
      ps_inn_lts_repo_name: "{{ ps_inn_lts_repo_name.stdout }}"
    
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling PS {{ major_release_version }} main repo
    include_tasks: ../tasks/enable_ps_innovation_repo_main.yml
    when: lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS {{ major_release_version }} test repo
    include_tasks: ../tasks/enable_ps_innovation_repo_testing.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling PS {{ major_release_version }} experimental repo
    include_tasks: ../tasks/enable_ps_innovation_repo_experimental.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: install Percona Server {{ major_release_version }} packages
    include_tasks: ../tasks/install_ps_innovation_lts.yml

  - name: Use python3 for Oracle linux 8
    raw: |
      if [ -f /usr/bin/python3 ] && [ ! -f /usr/bin/python ]; then
        ln --symbolic /usr/bin/python3 /usr/bin/python
      fi
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "8"

  - name: install sysbench new deb packages
    include_tasks: ../tasks/install_sysbench.yml
    when: lookup('env', 'install_repo') != "experimental"

  - name: list installed packages
    include_tasks: ../tasks/list_installed_packages.yml

  - name: stop mysql service
    service: name=mysql state=stopped

  - name: remove mysql data directory
    command: rm -r /var/lib/mysql

  - name: copy the global manifest for mysql
    copy:
        src: /package-testing/kms/mysqld.my
        dest: /usr/sbin/
        remote_src: yes

  - name: create the global configuration file for mysql on Debian/Ubuntu
    copy:
        dest: "/usr/lib/mysql/plugin/component_keyring_kms.cnf"
        content: |
            { "path": "/tmp/keyring_kms", "region": "us-east-1", "kms_key": "{{ key_id }}", "auth_key": "{{ access_key }}", "secret_access_key": "{{ secret_key }}", "read_only": false }
    when: ansible_os_family == "Debian"

  - name: create the global configuration file for mysql on Redhat/CentOS
    copy:
        dest: "/usr/lib64/mysql/plugin/component_keyring_kms.cnf"
        content: |
            { "path": "/tmp/keyring_kms", "region": "us-east-1", "kms_key": "{{ key_id }}", "auth_key": "{{ access_key }}", "secret_access_key": "{{ secret_key }}", "read_only": false }
    when: ansible_os_family == "RedHat"

  - name: create keyring_kms file and change its permission on Redhat/CentOS
    ansible.builtin.file:
      path: /tmp/keyring_kms
      owner: mysql
      group: mysql
      state: touch
    when: ansible_os_family == "RedHat"

  - name: copy the encryption config file on Debian/Ubuntu
    copy:
        src: /package-testing/kms/encryption.j2
        dest: /etc/mysql/conf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

  - name: copy the encryption config file on RHEL/CentOS/Amazon
    copy:
        src: /package-testing/kms/encryption.j2
        dest: /etc/my.cnf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: start mysql service
    service: name=mysql state=started

  - name: check mysql service status
    command: /package-testing/check_running.sh mysql running

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: check that Percona Server package versions are correct
    command: /package-testing/package_check.sh ps{{ major_release_version }}

  - name: import world database
    command: /package-testing/plugins_test_{{ major_release_version }}.sh
