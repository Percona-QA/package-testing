---
# This playbook does following:
#   enables Percona testing repository
#   installs latest version of PS 8.0, PT and PXB 8.0
#   does some tests

# Cosmic is still missing python
# - import_playbook: test_prep.yml

- hosts: all
  become: true
  become_method: sudo

  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: include tasks for enabling main repo
    include_tasks: ../tasks/enable_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS 8 main repo
    include_tasks: ../tasks/enable_ps8_main_repo.yml
    when: lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS 8 test repo
    include_tasks: ../tasks/enable_ps8_testing_repo.yml
    when: lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling PS 8 experimental repo
    include_tasks: ../tasks/enable_ps8_experimental_repo.yml
    when: lookup('env', 'install_repo') == "experimental"

  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

#  Disable Percona Toolkit installation till its supported in OL9 and Jammy
#  - name: install Percona Toolkit new deb packages
#    include_tasks: ../tasks/install_pt.yml


## INSTALL PS
  - name: install Percona Server 8.0 packages
    include_tasks: ../tasks/install_ps80.yml
    when:
      - lookup('env', 'server_to_test') == "ps-80"

# INSTALL MS 

  - name: Extract PXB major and minor version number using shell commands
    shell: cat /package-testing/VERSIONS | grep 'PXB80_VER' | cut -d'=' -f2 | sed 's/"//g'
    register: pxb_version_major_minor_register

  - name: Extract PXB major version number using shell commands
    shell: cat /package-testing/VERSIONS | grep PXB80_VER | awk -F'[=".]' '{print $3"."$4}'
    register: pxb_version_major_register

  - name: Extract version number using shell commands
    shell: cat /package-testing/VERSIONS | grep -oP 'PXB80_VER="\K(\d+)\.(\d+)' | tr -d '.'
    register: major_release_version_register

  - name: Set major_release_version variable
    set_fact:
      major_release_version_reg: "{{ major_release_version_register.stdout }}"

  - name: Set pxb_version_major variable
    set_fact:
      pxb_version_major_reg: "{{ pxb_version_major_register.stdout }}"

  - name: Set pxb_version_major_minor variable
    set_fact:
      pxb_version_major_minor_reg: "{{ pxb_version_major_minor_register.stdout }}"

  - name: DEBUG  PXB version number
    debug:
      msg: "PXB version number is {{ pxb_version_major_reg }} {{ pxb_version_major_minor_reg }}"

###
      
  - name: install MYSQL MS Server {{ pxb_version_major_reg }} packages
    include_tasks: ../tasks/install_ms_innovation_lts.yml
    vars:
      pxb_version_major: "{{ pxb_version_major_reg }}"
      pxb_version_major_minor: "{{ pxb_version_major_minor_reg }}"
    when:
      - lookup('env', 'server_to_test') == "ms-80"

  - name: install Percona XtraBackup 8.0 packages
    include_tasks: ../tasks/install_pxb80.yml

  - name: start mysql service with service command
    command: service mysql start
    when: ansible_os_family == "RedHat" and ansible_distribution_major_version == "6"

#  - name: start mysql service with systemctl command
#    command: systemctl start mysqld
#    when: ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: start mysql service with service module RHEL PXB80
    ansible.builtin.systemd:
      name: mysqld
      enabled: yes
      state: started
    become: yes
    when: 
      - ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

  - name: start mysql service with service module DEBIAN PXB80
    ansible.builtin.systemd:
      name: mysql
      enabled: yes
      state: started
    become: yes
    when: 
      - ansible_os_family == "Debian"

  - name: PRINT INSTALLED XTRABACKUP version rhel
    shell: rpm -qa | grep percona-xtrabackup
    when: 
      - ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"
    register: xtrabackup_version_print

  - name: DEBUG xtrabackup_version_print rhel
    debug:
      msg: "Xtrabackup version is {{ xtrabackup_version_print.stdout }}"
    when: 
      - ansible_os_family == "RedHat" and ansible_distribution_major_version >= "7"

##
  - name: PRINT INSTALLED XTRABACKUP version DEBIAN
    shell: apt list --installed | grep percona-xtrabackup
    when: 
      - ansible_os_family == "Debian"
    register: xtrabackup_version_print

  - name: DEBUG xtrabackup_version_print DEBIAN
    debug:
      msg: "Xtrabackup version is {{ xtrabackup_version_print.stdout }}"
    when: 
      - ansible_os_family == "Debian"

##
  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: install plugins, import world database
    command: /package-testing/plugins_test.sh

  - name: Print the version of the installed Percona XtraBackup
    shell: |
      {
        echo "XTRABACKUP VERSION is ";
        xtrabackup --version || echo "FAILED: xtrabackup --version";
        echo "xbstream VERSION is ";
        xbstream --version || echo "FAILED: xbstream --version";
        echo "xbcloud VERSION is ";
        xbcloud --version || echo "FAILED: xbcloud --version";
        echo "xbcrypt VERSION is ";
        xbcrypt --version || echo "FAILED: xbcrypt --version";
      }
    register: version_output
    ignore_errors: yes

  - name: Display version information
    debug:
      var: version_output.stdout_lines


  - name: check that Percona XtraBackup version is correct
    command: /package-testing/version_check.sh pxb80

  - name: check that Percona XtraBackup package versions are correct
    command: /package-testing/package_check.sh pxb80

  - name: run backup
    command: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/

  - name: prepare backup
    command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/

  - name: install lz4 and zstd packages on Redhat/CentOS
    yum:
      name: "{{ packages }}"
    vars:
      packages:
      - lz4
      - zstd
    when: ansible_os_family == "RedHat"

  - name: install lz4 and zstd packages on Ubuntu/Debian
    apt:
      name: "{{ packages }}"
    vars:
      packages:
      - lz4
      - zstd
    when: ansible_os_family == "Debian" and ansible_distribution_release != "bionic"

  - name: install lz4 and zstd packages on Bionic 
    apt:
      name: "{{ packages }}"
    vars: 
      packages:
      - liblz4-tool
      - zstd
    when: ansible_os_family == "Debian" and ansible_distribution_release == "bionic"

  - name: run backup with lz4 compression
    command: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backup_l/ --compress=lz4 --compress-threads=10

  - name: decompress backup
    command: /usr/bin/xtrabackup --decompress --user=root --target-dir=/tmp/backup_l/

  - name: prepare backup
    command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backup_l/

  - name: run backup with zstd compression
    command: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backup_z/ --compress=zstd --compress-threads=10

  - name: decompress backup
    command: /usr/bin/xtrabackup --decompress --user=root --target-dir=/tmp/backup_z/

  - name: prepare backup
    command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backup_z/
    
  - name: remove Percona Server deb packages
    apt:
      name: "{{ packages }}"
      update_cache: no
      state: absent
    vars:
      packages:
      - percona-server-server*
      - percona-xtrabackup-80
    when: ansible_os_family == "Debian"

  - name: remove Percona Server rpm packages
    yum:
      name: "{{ packages }}"
      state: absent
    vars:
     packages:
      - percona-server-server*
      - percona-xtrabackup-80
    when: ansible_os_family == "RedHat"

  - name: check if process is stopped after package removal
    command: /package-testing/check_running.sh mysql stopped
    when:
      - lookup('env', 'server_to_test') != "ms-80"
