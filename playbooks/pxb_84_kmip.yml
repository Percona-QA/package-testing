---
# This playbook does the following:
#   enables Percona testing repository
#   installs latest version of PyKmip, PS 8.4, PXB 8.4 and runs some tests

- hosts: all
  become: true
  become_method: sudo
  vars:
    gnupg_home: /root/.gnupg
    percona_key1: 4D1BB29D63D98E422B2113B19334A25F8507EFA5
    percona_key1_file: "{{ gnupg_home }}/PERCONA-PACKAGING-KEY"
  tasks:
  - name: include tasks for test env setup
    include_tasks: ../tasks/test_prep.yml

  - name: disable selinux for RedHat/CentOS
    selinux: state=disabled
    when: ansible_os_family == "RedHat"

  - name: include tasks for enabling PS 84 test repo
    include_tasks: ../tasks/enable_ps84_main_repo.yml
    when: 
      - lookup('env', 'install_repo') == "main"

  - name: include tasks for enabling PS 84 test repo
    include_tasks: ../tasks/enable_ps84_testing_repo.yml
    when: 
      - lookup('env', 'install_repo') == "testing" or lookup('env', 'install_repo') == ""

  - name: include tasks for enabling PS 84 experimental repo
    include_tasks: ../tasks/enable_ps84_experimental_repo.yml
    when: 
      - lookup('env', 'install_repo') == "experimental"
      
  - name: download and extract world database
    command: "{{ item }}"
    with_items:
    - wget --no-check-certificate -P /package-testing https://raw.githubusercontent.com/Percona-QA/percona-qa/master/sample_db/world.sql

  - name: install Percona Server 8.4 packages
    include_tasks: ../tasks/install_ps84.yml
    when:
      - lookup('env', 'server_to_test') == "ps-84"

# INSTALL MS 

  - name: Extract PXB major and minor version number using shell commands
    shell: cat /package-testing/VERSIONS | grep 'PXB84_VER' | cut -d'=' -f2 | sed 's/"//g'
    register: pxb_version_major_minor_register

  - name: Extract PXB major version number using shell commands
    shell: cat /package-testing/VERSIONS | grep PXB84_VER | awk -F'[=".]' '{print $3"."$4}'
    register: pxb_version_major_register

  - name: Extract version number using shell commands
    shell: cat /package-testing/VERSIONS | grep -oP 'PXB84_VER="\K(\d+)\.(\d+)' | tr -d '.'
    register: major_release_version_register

  - name: Set major_release_version variable
    set_fact:
      major_release_version_reg: "{{ major_release_version_register.stdout }}"

  - name: Set pxb_version_major variable
    set_fact:
      pxb_version_major_reg: "{{ pxb_version_major_register.stdout }}"

  - name: Set pxb_version_major_minor variable
    set_fact:
      pxb_version_major_minor_reg: "{{ pxb_version_major_minor_register.stdout }}"

  - name: DEBUG  PXB version number
    debug:
      msg: "PXB version number is {{ pxb_version_major_reg }} {{ pxb_version_major_minor_reg }}"
      
  - name: install MYSQL MS Server {{ pxb_version_major_reg }} packages
    include_tasks: ../tasks/install_ms_innovation_lts.yml
    vars:
      pxb_version_major: "{{ pxb_version_major_reg }}"
      pxb_version_major_minor: "{{ pxb_version_major_minor_reg }}"
    when:
      - lookup('env', 'server_to_test') == "ms-84"

##

  - name: install sysbench new deb packages
    include_tasks: ../tasks/install_sysbench.yml
    when: lookup('env', 'install_repo') != "experimental" and ansible_distribution_release != "bullseye"

  - name: list installed packages
    include_tasks: ../tasks/list_installed_packages.yml

#  - name: List the services available
#    shell: systemctl list-units --type=service | grep mysqld
#    register: services
#
#  - name: Print the services
#    debug:
#      var: services

  - name: stop mysql service RHEL
    service: name=mysqld state=stopped
    when: ansible_os_family == "RedHat"

  - name: stop mysql service DEBIAN
    service: name=mysql state=stopped
    when: ansible_os_family == "Debian"

  - name: remove mysql data directory
    command: rm -r /var/lib/mysql

  - name: install python3-pip on RedHat/CentOS
    yum:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when: ansible_os_family == "RedHat"

  - name: install python3-pip on Debian/Ubuntu
    apt:
      name:
      - python3-pip
      state: latest
      update_cache: yes
    when: ansible_os_family == "Debian"

  - name: install pykmip
    command: "{{ item }}"
    with_items:
        - python3 -m pip install -U pip
        - python3 -m pip install -U setuptools
        - python3 -m pip install -U pykmip
    when: ansible_distribution_release != "bookworm"

  - name: install pykmip
    command: "{{ item }}"
    with_items:
        - python3 -m pip install -U --break-system-packages pip
        - python3 -m pip install -U --break-system-packages setuptools
        - python3 -m pip install -U --break-system-packages pykmip
    when: ansible_distribution_release == "bookworm"    

  - name: downgrade SQLAlchemy as new version doesn't work with pykmip
    command: pip3 install SQLAlchemy==1.4.46
    when: ansible_distribution_release != "bookworm"

  - name: downgrade SQLAlchemy as new version doesn't work with pykmip
    command: pip3 install --break-system-packages SQLAlchemy==1.4.46
    when: ansible_distribution_release == "bookworm"  

  - name: start pykmip server
    shell: nohup /usr/local/bin/pykmip-server -f /package-testing/kmip/server.conf -l /pykmip_server.log 2>&1 &

  - name: copy the global manifest for mysql
    copy:
        src: /package-testing/kmip/mysqld.my
        dest: /usr/sbin/
        remote_src: yes

  - name: copy the global configuration file for mysql in Redhat/CentOS
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib64/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: copy the global configuration file for mysql in Debian/Ubuntu
    copy:
        src: /package-testing/kmip/component_keyring_kmip.cnf
        dest: /usr/lib/mysql/plugin/
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: copy the encryption config file on Debian/Ubuntu
    copy:
        src: /package-testing/kmip/encryption.j2
        dest: /etc/mysql/conf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "Debian"

  - name: append include for RedHat
    lineinfile:
        path: /etc/my.cnf
        line: '!includedir /etc/my.cnf.d'
    when: ansible_os_family == "RedHat"

  - name: copy the encryption config file on RHEL/CentOS/Amazon
    copy:
        src: /package-testing/kmip/encryption.j2
        dest: /etc/my.cnf.d/encryption.cnf
        remote_src: yes
    when: ansible_os_family == "RedHat"

  - name: start mysql service debian
    service: name=mysql state=started
    when: ansible_os_family == "Debian"

  - name: start mysql service rhel
    service: name=mysqld state=started
    when: ansible_os_family == "RedHat"

  - name: check mysql service status
    command: /package-testing/check_running.sh mysql running

  - name: set root password on centos
    command: /package-testing/setpass_57.sh
    when: ansible_os_family == "RedHat"

  - name: import world database
    command: /package-testing/plugins_test.sh

  - name: Enable PXB 84 repo
    command: percona-release enable-only pxb-84-lts testing

  - name: install Percona XtraBackup 8.4 packages
    include_tasks: ../tasks/install_pxb84.yml

  - name: check that Percona XtraBackup version is correct
    command: /package-testing/version_check.sh pxb84

  - name: check that Percona XtraBackup package versions are correct
    command: /package-testing/package_check.sh pxb84

  - name: run backup
    command: /usr/bin/xtrabackup --backup --user=root --target-dir=/tmp/backups/

  - name: prepare backup on Redhat/CentOS
    command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/ --component-keyring-config=/usr/lib64/mysql/plugin/component_keyring_kmip.cnf
    when: ansible_os_family == "RedHat"

  - name: prepare backup on Debian/Ubuntu
    command: /usr/bin/xtrabackup --prepare --user=root --target-dir=/tmp/backups/ --component-keyring-config=/usr/lib/mysql/plugin/component_keyring_kmip.cnf
    when: ansible_os_family == "Debian"
